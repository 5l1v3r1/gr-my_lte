# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_my_lte_swig', [dirname(__file__)])
        except ImportError:
            import _my_lte_swig
            return _my_lte_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_my_lte_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _my_lte_swig = swig_import_helper()
    del swig_import_helper
else:
    import _my_lte_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _my_lte_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _my_lte_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _my_lte_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _my_lte_swig.high_res_timer_epoch()
class lte_random_bit_gen(object):
    """Proxy of C++ gr::my_lte::lte_random_bit_gen class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int packet_len, uint32 usleep_val) -> lte_random_bit_gen_sptr"""
        return _my_lte_swig.lte_random_bit_gen_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_lte_random_bit_gen
    __del__ = lambda self : None;
lte_random_bit_gen_swigregister = _my_lte_swig.lte_random_bit_gen_swigregister
lte_random_bit_gen_swigregister(lte_random_bit_gen)

def lte_random_bit_gen_make(*args, **kwargs):
  """lte_random_bit_gen_make(int packet_len, uint32 usleep_val) -> lte_random_bit_gen_sptr"""
  return _my_lte_swig.lte_random_bit_gen_make(*args, **kwargs)

class lte_random_bit_gen_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::lte_random_bit_gen)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::lte_random_bit_gen)> self) -> lte_random_bit_gen_sptr
        __init__(boost::shared_ptr<(gr::my_lte::lte_random_bit_gen)> self, lte_random_bit_gen p) -> lte_random_bit_gen_sptr
        """
        this = _my_lte_swig.new_lte_random_bit_gen_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(lte_random_bit_gen_sptr self) -> lte_random_bit_gen"""
        return _my_lte_swig.lte_random_bit_gen_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_lte_random_bit_gen_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(lte_random_bit_gen_sptr self, int packet_len, uint32 usleep_val) -> lte_random_bit_gen_sptr"""
        return _my_lte_swig.lte_random_bit_gen_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(lte_random_bit_gen_sptr self) -> unsigned int"""
        return _my_lte_swig.lte_random_bit_gen_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(lte_random_bit_gen_sptr self, int which, int delay)
        declare_sample_delay(lte_random_bit_gen_sptr self, unsigned int delay)
        """
        return _my_lte_swig.lte_random_bit_gen_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(lte_random_bit_gen_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.lte_random_bit_gen_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(lte_random_bit_gen_sptr self) -> int"""
        return _my_lte_swig.lte_random_bit_gen_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(lte_random_bit_gen_sptr self) -> double"""
        return _my_lte_swig.lte_random_bit_gen_sptr_relative_rate(self)

    def start(self):
        """start(lte_random_bit_gen_sptr self) -> bool"""
        return _my_lte_swig.lte_random_bit_gen_sptr_start(self)

    def stop(self):
        """stop(lte_random_bit_gen_sptr self) -> bool"""
        return _my_lte_swig.lte_random_bit_gen_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(lte_random_bit_gen_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.lte_random_bit_gen_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(lte_random_bit_gen_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.lte_random_bit_gen_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(lte_random_bit_gen_sptr self) -> int"""
        return _my_lte_swig.lte_random_bit_gen_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(lte_random_bit_gen_sptr self, int m)"""
        return _my_lte_swig.lte_random_bit_gen_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(lte_random_bit_gen_sptr self)"""
        return _my_lte_swig.lte_random_bit_gen_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(lte_random_bit_gen_sptr self) -> bool"""
        return _my_lte_swig.lte_random_bit_gen_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(lte_random_bit_gen_sptr self, int m)"""
        return _my_lte_swig.lte_random_bit_gen_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(lte_random_bit_gen_sptr self) -> int"""
        return _my_lte_swig.lte_random_bit_gen_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(lte_random_bit_gen_sptr self, int i) -> long"""
        return _my_lte_swig.lte_random_bit_gen_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(lte_random_bit_gen_sptr self, long max_output_buffer)
        set_max_output_buffer(lte_random_bit_gen_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.lte_random_bit_gen_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(lte_random_bit_gen_sptr self, int i) -> long"""
        return _my_lte_swig.lte_random_bit_gen_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(lte_random_bit_gen_sptr self, long min_output_buffer)
        set_min_output_buffer(lte_random_bit_gen_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.lte_random_bit_gen_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(lte_random_bit_gen_sptr self) -> float"""
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(lte_random_bit_gen_sptr self) -> float"""
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(lte_random_bit_gen_sptr self) -> float"""
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(lte_random_bit_gen_sptr self) -> float"""
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(lte_random_bit_gen_sptr self) -> float"""
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(lte_random_bit_gen_sptr self) -> float"""
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(lte_random_bit_gen_sptr self, int which) -> float
        pc_input_buffers_full(lte_random_bit_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(lte_random_bit_gen_sptr self, int which) -> float
        pc_input_buffers_full_avg(lte_random_bit_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(lte_random_bit_gen_sptr self, int which) -> float
        pc_input_buffers_full_var(lte_random_bit_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(lte_random_bit_gen_sptr self, int which) -> float
        pc_output_buffers_full(lte_random_bit_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(lte_random_bit_gen_sptr self, int which) -> float
        pc_output_buffers_full_avg(lte_random_bit_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(lte_random_bit_gen_sptr self, int which) -> float
        pc_output_buffers_full_var(lte_random_bit_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(lte_random_bit_gen_sptr self) -> float"""
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(lte_random_bit_gen_sptr self) -> float"""
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(lte_random_bit_gen_sptr self) -> float"""
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(lte_random_bit_gen_sptr self) -> float"""
        return _my_lte_swig.lte_random_bit_gen_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(lte_random_bit_gen_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.lte_random_bit_gen_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(lte_random_bit_gen_sptr self)"""
        return _my_lte_swig.lte_random_bit_gen_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(lte_random_bit_gen_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.lte_random_bit_gen_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(lte_random_bit_gen_sptr self) -> int"""
        return _my_lte_swig.lte_random_bit_gen_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(lte_random_bit_gen_sptr self) -> int"""
        return _my_lte_swig.lte_random_bit_gen_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(lte_random_bit_gen_sptr self, int priority) -> int"""
        return _my_lte_swig.lte_random_bit_gen_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(lte_random_bit_gen_sptr self) -> std::string"""
        return _my_lte_swig.lte_random_bit_gen_sptr_name(self)

    def symbol_name(self):
        """symbol_name(lte_random_bit_gen_sptr self) -> std::string"""
        return _my_lte_swig.lte_random_bit_gen_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(lte_random_bit_gen_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.lte_random_bit_gen_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(lte_random_bit_gen_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.lte_random_bit_gen_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(lte_random_bit_gen_sptr self) -> long"""
        return _my_lte_swig.lte_random_bit_gen_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(lte_random_bit_gen_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.lte_random_bit_gen_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(lte_random_bit_gen_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.lte_random_bit_gen_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(lte_random_bit_gen_sptr self) -> std::string"""
        return _my_lte_swig.lte_random_bit_gen_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(lte_random_bit_gen_sptr self, std::string name)"""
        return _my_lte_swig.lte_random_bit_gen_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(lte_random_bit_gen_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.lte_random_bit_gen_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(lte_random_bit_gen_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.lte_random_bit_gen_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(lte_random_bit_gen_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.lte_random_bit_gen_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(lte_random_bit_gen_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.lte_random_bit_gen_sptr_message_subscribers(self, *args, **kwargs)

lte_random_bit_gen_sptr_swigregister = _my_lte_swig.lte_random_bit_gen_sptr_swigregister
lte_random_bit_gen_sptr_swigregister(lte_random_bit_gen_sptr)

lte_random_bit_gen_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
lte_random_bit_gen = lte_random_bit_gen.make;

class crc_attachment(object):
    """Proxy of C++ gr::my_lte::crc_attachment class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(uint32 CRC_type, int N_ant, std::string ch_name, int ninput_needed, uint32 rnti) -> crc_attachment_sptr"""
        return _my_lte_swig.crc_attachment_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_crc_attachment
    __del__ = lambda self : None;
crc_attachment_swigregister = _my_lte_swig.crc_attachment_swigregister
crc_attachment_swigregister(crc_attachment)

def crc_attachment_make(*args, **kwargs):
  """crc_attachment_make(uint32 CRC_type, int N_ant, std::string ch_name, int ninput_needed, uint32 rnti) -> crc_attachment_sptr"""
  return _my_lte_swig.crc_attachment_make(*args, **kwargs)

CRC24A = _my_lte_swig.CRC24A
CRC24B = _my_lte_swig.CRC24B
CRC16 = _my_lte_swig.CRC16
CRC8 = _my_lte_swig.CRC8
class crc_attachment_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::crc_attachment)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::crc_attachment)> self) -> crc_attachment_sptr
        __init__(boost::shared_ptr<(gr::my_lte::crc_attachment)> self, crc_attachment p) -> crc_attachment_sptr
        """
        this = _my_lte_swig.new_crc_attachment_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(crc_attachment_sptr self) -> crc_attachment"""
        return _my_lte_swig.crc_attachment_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_crc_attachment_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(crc_attachment_sptr self, uint32 CRC_type, int N_ant, std::string ch_name, int ninput_needed, uint32 rnti) -> crc_attachment_sptr"""
        return _my_lte_swig.crc_attachment_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(crc_attachment_sptr self) -> unsigned int"""
        return _my_lte_swig.crc_attachment_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(crc_attachment_sptr self, int which, int delay)
        declare_sample_delay(crc_attachment_sptr self, unsigned int delay)
        """
        return _my_lte_swig.crc_attachment_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(crc_attachment_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.crc_attachment_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(crc_attachment_sptr self) -> int"""
        return _my_lte_swig.crc_attachment_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(crc_attachment_sptr self) -> double"""
        return _my_lte_swig.crc_attachment_sptr_relative_rate(self)

    def start(self):
        """start(crc_attachment_sptr self) -> bool"""
        return _my_lte_swig.crc_attachment_sptr_start(self)

    def stop(self):
        """stop(crc_attachment_sptr self) -> bool"""
        return _my_lte_swig.crc_attachment_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(crc_attachment_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.crc_attachment_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(crc_attachment_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.crc_attachment_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(crc_attachment_sptr self) -> int"""
        return _my_lte_swig.crc_attachment_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(crc_attachment_sptr self, int m)"""
        return _my_lte_swig.crc_attachment_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(crc_attachment_sptr self)"""
        return _my_lte_swig.crc_attachment_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(crc_attachment_sptr self) -> bool"""
        return _my_lte_swig.crc_attachment_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(crc_attachment_sptr self, int m)"""
        return _my_lte_swig.crc_attachment_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(crc_attachment_sptr self) -> int"""
        return _my_lte_swig.crc_attachment_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(crc_attachment_sptr self, int i) -> long"""
        return _my_lte_swig.crc_attachment_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(crc_attachment_sptr self, long max_output_buffer)
        set_max_output_buffer(crc_attachment_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.crc_attachment_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(crc_attachment_sptr self, int i) -> long"""
        return _my_lte_swig.crc_attachment_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(crc_attachment_sptr self, long min_output_buffer)
        set_min_output_buffer(crc_attachment_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.crc_attachment_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(crc_attachment_sptr self) -> float"""
        return _my_lte_swig.crc_attachment_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(crc_attachment_sptr self) -> float"""
        return _my_lte_swig.crc_attachment_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(crc_attachment_sptr self) -> float"""
        return _my_lte_swig.crc_attachment_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(crc_attachment_sptr self) -> float"""
        return _my_lte_swig.crc_attachment_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(crc_attachment_sptr self) -> float"""
        return _my_lte_swig.crc_attachment_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(crc_attachment_sptr self) -> float"""
        return _my_lte_swig.crc_attachment_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(crc_attachment_sptr self, int which) -> float
        pc_input_buffers_full(crc_attachment_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.crc_attachment_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(crc_attachment_sptr self, int which) -> float
        pc_input_buffers_full_avg(crc_attachment_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.crc_attachment_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(crc_attachment_sptr self, int which) -> float
        pc_input_buffers_full_var(crc_attachment_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.crc_attachment_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(crc_attachment_sptr self, int which) -> float
        pc_output_buffers_full(crc_attachment_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.crc_attachment_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(crc_attachment_sptr self, int which) -> float
        pc_output_buffers_full_avg(crc_attachment_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.crc_attachment_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(crc_attachment_sptr self, int which) -> float
        pc_output_buffers_full_var(crc_attachment_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.crc_attachment_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(crc_attachment_sptr self) -> float"""
        return _my_lte_swig.crc_attachment_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(crc_attachment_sptr self) -> float"""
        return _my_lte_swig.crc_attachment_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(crc_attachment_sptr self) -> float"""
        return _my_lte_swig.crc_attachment_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(crc_attachment_sptr self) -> float"""
        return _my_lte_swig.crc_attachment_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(crc_attachment_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.crc_attachment_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(crc_attachment_sptr self)"""
        return _my_lte_swig.crc_attachment_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(crc_attachment_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.crc_attachment_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(crc_attachment_sptr self) -> int"""
        return _my_lte_swig.crc_attachment_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(crc_attachment_sptr self) -> int"""
        return _my_lte_swig.crc_attachment_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(crc_attachment_sptr self, int priority) -> int"""
        return _my_lte_swig.crc_attachment_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(crc_attachment_sptr self) -> std::string"""
        return _my_lte_swig.crc_attachment_sptr_name(self)

    def symbol_name(self):
        """symbol_name(crc_attachment_sptr self) -> std::string"""
        return _my_lte_swig.crc_attachment_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(crc_attachment_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.crc_attachment_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(crc_attachment_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.crc_attachment_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(crc_attachment_sptr self) -> long"""
        return _my_lte_swig.crc_attachment_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(crc_attachment_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.crc_attachment_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(crc_attachment_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.crc_attachment_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(crc_attachment_sptr self) -> std::string"""
        return _my_lte_swig.crc_attachment_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(crc_attachment_sptr self, std::string name)"""
        return _my_lte_swig.crc_attachment_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(crc_attachment_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.crc_attachment_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(crc_attachment_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.crc_attachment_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(crc_attachment_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.crc_attachment_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(crc_attachment_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.crc_attachment_sptr_message_subscribers(self, *args, **kwargs)

crc_attachment_sptr_swigregister = _my_lte_swig.crc_attachment_sptr_swigregister
crc_attachment_sptr_swigregister(crc_attachment_sptr)

crc_attachment_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
crc_attachment = crc_attachment.make;

class code_block_segmentation(object):
    """Proxy of C++ gr::my_lte::code_block_segmentation class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> code_block_segmentation_sptr"""
        return _my_lte_swig.code_block_segmentation_make()

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_code_block_segmentation
    __del__ = lambda self : None;
code_block_segmentation_swigregister = _my_lte_swig.code_block_segmentation_swigregister
code_block_segmentation_swigregister(code_block_segmentation)

def code_block_segmentation_make():
  """code_block_segmentation_make() -> code_block_segmentation_sptr"""
  return _my_lte_swig.code_block_segmentation_make()

class code_block_segmentation_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::code_block_segmentation)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::code_block_segmentation)> self) -> code_block_segmentation_sptr
        __init__(boost::shared_ptr<(gr::my_lte::code_block_segmentation)> self, code_block_segmentation p) -> code_block_segmentation_sptr
        """
        this = _my_lte_swig.new_code_block_segmentation_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(code_block_segmentation_sptr self) -> code_block_segmentation"""
        return _my_lte_swig.code_block_segmentation_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_code_block_segmentation_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(code_block_segmentation_sptr self) -> code_block_segmentation_sptr"""
        return _my_lte_swig.code_block_segmentation_sptr_make(self)

    def history(self):
        """history(code_block_segmentation_sptr self) -> unsigned int"""
        return _my_lte_swig.code_block_segmentation_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(code_block_segmentation_sptr self, int which, int delay)
        declare_sample_delay(code_block_segmentation_sptr self, unsigned int delay)
        """
        return _my_lte_swig.code_block_segmentation_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(code_block_segmentation_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.code_block_segmentation_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(code_block_segmentation_sptr self) -> int"""
        return _my_lte_swig.code_block_segmentation_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(code_block_segmentation_sptr self) -> double"""
        return _my_lte_swig.code_block_segmentation_sptr_relative_rate(self)

    def start(self):
        """start(code_block_segmentation_sptr self) -> bool"""
        return _my_lte_swig.code_block_segmentation_sptr_start(self)

    def stop(self):
        """stop(code_block_segmentation_sptr self) -> bool"""
        return _my_lte_swig.code_block_segmentation_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(code_block_segmentation_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.code_block_segmentation_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(code_block_segmentation_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.code_block_segmentation_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(code_block_segmentation_sptr self) -> int"""
        return _my_lte_swig.code_block_segmentation_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(code_block_segmentation_sptr self, int m)"""
        return _my_lte_swig.code_block_segmentation_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(code_block_segmentation_sptr self)"""
        return _my_lte_swig.code_block_segmentation_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(code_block_segmentation_sptr self) -> bool"""
        return _my_lte_swig.code_block_segmentation_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(code_block_segmentation_sptr self, int m)"""
        return _my_lte_swig.code_block_segmentation_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(code_block_segmentation_sptr self) -> int"""
        return _my_lte_swig.code_block_segmentation_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(code_block_segmentation_sptr self, int i) -> long"""
        return _my_lte_swig.code_block_segmentation_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(code_block_segmentation_sptr self, long max_output_buffer)
        set_max_output_buffer(code_block_segmentation_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.code_block_segmentation_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(code_block_segmentation_sptr self, int i) -> long"""
        return _my_lte_swig.code_block_segmentation_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(code_block_segmentation_sptr self, long min_output_buffer)
        set_min_output_buffer(code_block_segmentation_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.code_block_segmentation_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(code_block_segmentation_sptr self) -> float"""
        return _my_lte_swig.code_block_segmentation_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(code_block_segmentation_sptr self) -> float"""
        return _my_lte_swig.code_block_segmentation_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(code_block_segmentation_sptr self) -> float"""
        return _my_lte_swig.code_block_segmentation_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(code_block_segmentation_sptr self) -> float"""
        return _my_lte_swig.code_block_segmentation_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(code_block_segmentation_sptr self) -> float"""
        return _my_lte_swig.code_block_segmentation_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(code_block_segmentation_sptr self) -> float"""
        return _my_lte_swig.code_block_segmentation_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(code_block_segmentation_sptr self, int which) -> float
        pc_input_buffers_full(code_block_segmentation_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.code_block_segmentation_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(code_block_segmentation_sptr self, int which) -> float
        pc_input_buffers_full_avg(code_block_segmentation_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.code_block_segmentation_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(code_block_segmentation_sptr self, int which) -> float
        pc_input_buffers_full_var(code_block_segmentation_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.code_block_segmentation_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(code_block_segmentation_sptr self, int which) -> float
        pc_output_buffers_full(code_block_segmentation_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.code_block_segmentation_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(code_block_segmentation_sptr self, int which) -> float
        pc_output_buffers_full_avg(code_block_segmentation_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.code_block_segmentation_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(code_block_segmentation_sptr self, int which) -> float
        pc_output_buffers_full_var(code_block_segmentation_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.code_block_segmentation_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(code_block_segmentation_sptr self) -> float"""
        return _my_lte_swig.code_block_segmentation_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(code_block_segmentation_sptr self) -> float"""
        return _my_lte_swig.code_block_segmentation_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(code_block_segmentation_sptr self) -> float"""
        return _my_lte_swig.code_block_segmentation_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(code_block_segmentation_sptr self) -> float"""
        return _my_lte_swig.code_block_segmentation_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(code_block_segmentation_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.code_block_segmentation_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(code_block_segmentation_sptr self)"""
        return _my_lte_swig.code_block_segmentation_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(code_block_segmentation_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.code_block_segmentation_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(code_block_segmentation_sptr self) -> int"""
        return _my_lte_swig.code_block_segmentation_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(code_block_segmentation_sptr self) -> int"""
        return _my_lte_swig.code_block_segmentation_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(code_block_segmentation_sptr self, int priority) -> int"""
        return _my_lte_swig.code_block_segmentation_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(code_block_segmentation_sptr self) -> std::string"""
        return _my_lte_swig.code_block_segmentation_sptr_name(self)

    def symbol_name(self):
        """symbol_name(code_block_segmentation_sptr self) -> std::string"""
        return _my_lte_swig.code_block_segmentation_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(code_block_segmentation_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.code_block_segmentation_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(code_block_segmentation_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.code_block_segmentation_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(code_block_segmentation_sptr self) -> long"""
        return _my_lte_swig.code_block_segmentation_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(code_block_segmentation_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.code_block_segmentation_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(code_block_segmentation_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.code_block_segmentation_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(code_block_segmentation_sptr self) -> std::string"""
        return _my_lte_swig.code_block_segmentation_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(code_block_segmentation_sptr self, std::string name)"""
        return _my_lte_swig.code_block_segmentation_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(code_block_segmentation_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.code_block_segmentation_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(code_block_segmentation_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.code_block_segmentation_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(code_block_segmentation_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.code_block_segmentation_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(code_block_segmentation_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.code_block_segmentation_sptr_message_subscribers(self, *args, **kwargs)

code_block_segmentation_sptr_swigregister = _my_lte_swig.code_block_segmentation_sptr_swigregister
code_block_segmentation_sptr_swigregister(code_block_segmentation_sptr)

code_block_segmentation_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
code_block_segmentation = code_block_segmentation.make;

class turbo_encoder(object):
    """Proxy of C++ gr::my_lte::turbo_encoder class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> turbo_encoder_sptr"""
        return _my_lte_swig.turbo_encoder_make()

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_turbo_encoder
    __del__ = lambda self : None;
turbo_encoder_swigregister = _my_lte_swig.turbo_encoder_swigregister
turbo_encoder_swigregister(turbo_encoder)

def turbo_encoder_make():
  """turbo_encoder_make() -> turbo_encoder_sptr"""
  return _my_lte_swig.turbo_encoder_make()

TX_NULL_BIT = _my_lte_swig.TX_NULL_BIT
class turbo_encoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::turbo_encoder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::turbo_encoder)> self) -> turbo_encoder_sptr
        __init__(boost::shared_ptr<(gr::my_lte::turbo_encoder)> self, turbo_encoder p) -> turbo_encoder_sptr
        """
        this = _my_lte_swig.new_turbo_encoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(turbo_encoder_sptr self) -> turbo_encoder"""
        return _my_lte_swig.turbo_encoder_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_turbo_encoder_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(turbo_encoder_sptr self) -> turbo_encoder_sptr"""
        return _my_lte_swig.turbo_encoder_sptr_make(self)

    def history(self):
        """history(turbo_encoder_sptr self) -> unsigned int"""
        return _my_lte_swig.turbo_encoder_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(turbo_encoder_sptr self, int which, int delay)
        declare_sample_delay(turbo_encoder_sptr self, unsigned int delay)
        """
        return _my_lte_swig.turbo_encoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(turbo_encoder_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.turbo_encoder_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(turbo_encoder_sptr self) -> int"""
        return _my_lte_swig.turbo_encoder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(turbo_encoder_sptr self) -> double"""
        return _my_lte_swig.turbo_encoder_sptr_relative_rate(self)

    def start(self):
        """start(turbo_encoder_sptr self) -> bool"""
        return _my_lte_swig.turbo_encoder_sptr_start(self)

    def stop(self):
        """stop(turbo_encoder_sptr self) -> bool"""
        return _my_lte_swig.turbo_encoder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(turbo_encoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.turbo_encoder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(turbo_encoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.turbo_encoder_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(turbo_encoder_sptr self) -> int"""
        return _my_lte_swig.turbo_encoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(turbo_encoder_sptr self, int m)"""
        return _my_lte_swig.turbo_encoder_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(turbo_encoder_sptr self)"""
        return _my_lte_swig.turbo_encoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(turbo_encoder_sptr self) -> bool"""
        return _my_lte_swig.turbo_encoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(turbo_encoder_sptr self, int m)"""
        return _my_lte_swig.turbo_encoder_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(turbo_encoder_sptr self) -> int"""
        return _my_lte_swig.turbo_encoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(turbo_encoder_sptr self, int i) -> long"""
        return _my_lte_swig.turbo_encoder_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(turbo_encoder_sptr self, long max_output_buffer)
        set_max_output_buffer(turbo_encoder_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.turbo_encoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(turbo_encoder_sptr self, int i) -> long"""
        return _my_lte_swig.turbo_encoder_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(turbo_encoder_sptr self, long min_output_buffer)
        set_min_output_buffer(turbo_encoder_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.turbo_encoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(turbo_encoder_sptr self) -> float"""
        return _my_lte_swig.turbo_encoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(turbo_encoder_sptr self) -> float"""
        return _my_lte_swig.turbo_encoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(turbo_encoder_sptr self) -> float"""
        return _my_lte_swig.turbo_encoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(turbo_encoder_sptr self) -> float"""
        return _my_lte_swig.turbo_encoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(turbo_encoder_sptr self) -> float"""
        return _my_lte_swig.turbo_encoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(turbo_encoder_sptr self) -> float"""
        return _my_lte_swig.turbo_encoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(turbo_encoder_sptr self, int which) -> float
        pc_input_buffers_full(turbo_encoder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.turbo_encoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(turbo_encoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(turbo_encoder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.turbo_encoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(turbo_encoder_sptr self, int which) -> float
        pc_input_buffers_full_var(turbo_encoder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.turbo_encoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(turbo_encoder_sptr self, int which) -> float
        pc_output_buffers_full(turbo_encoder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.turbo_encoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(turbo_encoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(turbo_encoder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.turbo_encoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(turbo_encoder_sptr self, int which) -> float
        pc_output_buffers_full_var(turbo_encoder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.turbo_encoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(turbo_encoder_sptr self) -> float"""
        return _my_lte_swig.turbo_encoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(turbo_encoder_sptr self) -> float"""
        return _my_lte_swig.turbo_encoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(turbo_encoder_sptr self) -> float"""
        return _my_lte_swig.turbo_encoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(turbo_encoder_sptr self) -> float"""
        return _my_lte_swig.turbo_encoder_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(turbo_encoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.turbo_encoder_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(turbo_encoder_sptr self)"""
        return _my_lte_swig.turbo_encoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(turbo_encoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.turbo_encoder_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(turbo_encoder_sptr self) -> int"""
        return _my_lte_swig.turbo_encoder_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(turbo_encoder_sptr self) -> int"""
        return _my_lte_swig.turbo_encoder_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(turbo_encoder_sptr self, int priority) -> int"""
        return _my_lte_swig.turbo_encoder_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(turbo_encoder_sptr self) -> std::string"""
        return _my_lte_swig.turbo_encoder_sptr_name(self)

    def symbol_name(self):
        """symbol_name(turbo_encoder_sptr self) -> std::string"""
        return _my_lte_swig.turbo_encoder_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(turbo_encoder_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.turbo_encoder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(turbo_encoder_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.turbo_encoder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(turbo_encoder_sptr self) -> long"""
        return _my_lte_swig.turbo_encoder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(turbo_encoder_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.turbo_encoder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(turbo_encoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.turbo_encoder_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(turbo_encoder_sptr self) -> std::string"""
        return _my_lte_swig.turbo_encoder_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(turbo_encoder_sptr self, std::string name)"""
        return _my_lte_swig.turbo_encoder_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(turbo_encoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.turbo_encoder_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(turbo_encoder_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.turbo_encoder_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(turbo_encoder_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.turbo_encoder_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(turbo_encoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.turbo_encoder_sptr_message_subscribers(self, *args, **kwargs)

turbo_encoder_sptr_swigregister = _my_lte_swig.turbo_encoder_sptr_swigregister
turbo_encoder_sptr_swigregister(turbo_encoder_sptr)

turbo_encoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
turbo_encoder = turbo_encoder.make;

class rate_match(object):
    """Proxy of C++ gr::my_lte::rate_match class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(uint32 N_e_bits, uint32 N_code_block, int tx_mode, uint32 N_soft, int M_dl_harq, 
            int rv_idx, std::string chan_name) -> rate_match_sptr
        """
        return _my_lte_swig.rate_match_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_rate_match
    __del__ = lambda self : None;
rate_match_swigregister = _my_lte_swig.rate_match_swigregister
rate_match_swigregister(rate_match)

def rate_match_make(*args, **kwargs):
  """
    rate_match_make(uint32 N_e_bits, uint32 N_code_block, int tx_mode, uint32 N_soft, int M_dl_harq, 
        int rv_idx, std::string chan_name) -> rate_match_sptr
    """
  return _my_lte_swig.rate_match_make(*args, **kwargs)

class rate_match_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::rate_match)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::rate_match)> self) -> rate_match_sptr
        __init__(boost::shared_ptr<(gr::my_lte::rate_match)> self, rate_match p) -> rate_match_sptr
        """
        this = _my_lte_swig.new_rate_match_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(rate_match_sptr self) -> rate_match"""
        return _my_lte_swig.rate_match_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_rate_match_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(rate_match_sptr self, uint32 N_e_bits, uint32 N_code_block, int tx_mode, uint32 N_soft, int M_dl_harq, 
            int rv_idx, std::string chan_name) -> rate_match_sptr
        """
        return _my_lte_swig.rate_match_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(rate_match_sptr self) -> unsigned int"""
        return _my_lte_swig.rate_match_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rate_match_sptr self, int which, int delay)
        declare_sample_delay(rate_match_sptr self, unsigned int delay)
        """
        return _my_lte_swig.rate_match_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(rate_match_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.rate_match_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(rate_match_sptr self) -> int"""
        return _my_lte_swig.rate_match_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(rate_match_sptr self) -> double"""
        return _my_lte_swig.rate_match_sptr_relative_rate(self)

    def start(self):
        """start(rate_match_sptr self) -> bool"""
        return _my_lte_swig.rate_match_sptr_start(self)

    def stop(self):
        """stop(rate_match_sptr self) -> bool"""
        return _my_lte_swig.rate_match_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(rate_match_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.rate_match_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(rate_match_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.rate_match_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(rate_match_sptr self) -> int"""
        return _my_lte_swig.rate_match_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(rate_match_sptr self, int m)"""
        return _my_lte_swig.rate_match_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rate_match_sptr self)"""
        return _my_lte_swig.rate_match_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rate_match_sptr self) -> bool"""
        return _my_lte_swig.rate_match_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(rate_match_sptr self, int m)"""
        return _my_lte_swig.rate_match_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(rate_match_sptr self) -> int"""
        return _my_lte_swig.rate_match_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(rate_match_sptr self, int i) -> long"""
        return _my_lte_swig.rate_match_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rate_match_sptr self, long max_output_buffer)
        set_max_output_buffer(rate_match_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.rate_match_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(rate_match_sptr self, int i) -> long"""
        return _my_lte_swig.rate_match_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rate_match_sptr self, long min_output_buffer)
        set_min_output_buffer(rate_match_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.rate_match_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(rate_match_sptr self) -> float"""
        return _my_lte_swig.rate_match_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rate_match_sptr self) -> float"""
        return _my_lte_swig.rate_match_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rate_match_sptr self) -> float"""
        return _my_lte_swig.rate_match_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(rate_match_sptr self) -> float"""
        return _my_lte_swig.rate_match_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rate_match_sptr self) -> float"""
        return _my_lte_swig.rate_match_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(rate_match_sptr self) -> float"""
        return _my_lte_swig.rate_match_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rate_match_sptr self, int which) -> float
        pc_input_buffers_full(rate_match_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.rate_match_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rate_match_sptr self, int which) -> float
        pc_input_buffers_full_avg(rate_match_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.rate_match_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rate_match_sptr self, int which) -> float
        pc_input_buffers_full_var(rate_match_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.rate_match_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rate_match_sptr self, int which) -> float
        pc_output_buffers_full(rate_match_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.rate_match_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rate_match_sptr self, int which) -> float
        pc_output_buffers_full_avg(rate_match_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.rate_match_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rate_match_sptr self, int which) -> float
        pc_output_buffers_full_var(rate_match_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.rate_match_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(rate_match_sptr self) -> float"""
        return _my_lte_swig.rate_match_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(rate_match_sptr self) -> float"""
        return _my_lte_swig.rate_match_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(rate_match_sptr self) -> float"""
        return _my_lte_swig.rate_match_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(rate_match_sptr self) -> float"""
        return _my_lte_swig.rate_match_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(rate_match_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.rate_match_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(rate_match_sptr self)"""
        return _my_lte_swig.rate_match_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(rate_match_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.rate_match_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(rate_match_sptr self) -> int"""
        return _my_lte_swig.rate_match_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(rate_match_sptr self) -> int"""
        return _my_lte_swig.rate_match_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(rate_match_sptr self, int priority) -> int"""
        return _my_lte_swig.rate_match_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(rate_match_sptr self) -> std::string"""
        return _my_lte_swig.rate_match_sptr_name(self)

    def symbol_name(self):
        """symbol_name(rate_match_sptr self) -> std::string"""
        return _my_lte_swig.rate_match_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(rate_match_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.rate_match_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(rate_match_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.rate_match_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(rate_match_sptr self) -> long"""
        return _my_lte_swig.rate_match_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(rate_match_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.rate_match_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(rate_match_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.rate_match_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(rate_match_sptr self) -> std::string"""
        return _my_lte_swig.rate_match_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(rate_match_sptr self, std::string name)"""
        return _my_lte_swig.rate_match_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(rate_match_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.rate_match_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(rate_match_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.rate_match_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(rate_match_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.rate_match_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(rate_match_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.rate_match_sptr_message_subscribers(self, *args, **kwargs)

rate_match_sptr_swigregister = _my_lte_swig.rate_match_sptr_swigregister
rate_match_sptr_swigregister(rate_match_sptr)

rate_match_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rate_match = rate_match.make;

class scrambler(object):
    """Proxy of C++ gr::my_lte::scrambler class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(uint32 N_id_cell, std::string name, short rnti, uint32 set_align) -> scrambler_sptr"""
        return _my_lte_swig.scrambler_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_scrambler
    __del__ = lambda self : None;
scrambler_swigregister = _my_lte_swig.scrambler_swigregister
scrambler_swigregister(scrambler)

def scrambler_make(*args, **kwargs):
  """scrambler_make(uint32 N_id_cell, std::string name, short rnti, uint32 set_align) -> scrambler_sptr"""
  return _my_lte_swig.scrambler_make(*args, **kwargs)

class scrambler_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::scrambler)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::scrambler)> self) -> scrambler_sptr
        __init__(boost::shared_ptr<(gr::my_lte::scrambler)> self, scrambler p) -> scrambler_sptr
        """
        this = _my_lte_swig.new_scrambler_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(scrambler_sptr self) -> scrambler"""
        return _my_lte_swig.scrambler_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_scrambler_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(scrambler_sptr self, uint32 N_id_cell, std::string name, short rnti, uint32 set_align) -> scrambler_sptr"""
        return _my_lte_swig.scrambler_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(scrambler_sptr self) -> unsigned int"""
        return _my_lte_swig.scrambler_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(scrambler_sptr self, int which, int delay)
        declare_sample_delay(scrambler_sptr self, unsigned int delay)
        """
        return _my_lte_swig.scrambler_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(scrambler_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.scrambler_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(scrambler_sptr self) -> int"""
        return _my_lte_swig.scrambler_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(scrambler_sptr self) -> double"""
        return _my_lte_swig.scrambler_sptr_relative_rate(self)

    def start(self):
        """start(scrambler_sptr self) -> bool"""
        return _my_lte_swig.scrambler_sptr_start(self)

    def stop(self):
        """stop(scrambler_sptr self) -> bool"""
        return _my_lte_swig.scrambler_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(scrambler_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.scrambler_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(scrambler_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.scrambler_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(scrambler_sptr self) -> int"""
        return _my_lte_swig.scrambler_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(scrambler_sptr self, int m)"""
        return _my_lte_swig.scrambler_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(scrambler_sptr self)"""
        return _my_lte_swig.scrambler_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(scrambler_sptr self) -> bool"""
        return _my_lte_swig.scrambler_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(scrambler_sptr self, int m)"""
        return _my_lte_swig.scrambler_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(scrambler_sptr self) -> int"""
        return _my_lte_swig.scrambler_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(scrambler_sptr self, int i) -> long"""
        return _my_lte_swig.scrambler_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(scrambler_sptr self, long max_output_buffer)
        set_max_output_buffer(scrambler_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.scrambler_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(scrambler_sptr self, int i) -> long"""
        return _my_lte_swig.scrambler_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(scrambler_sptr self, long min_output_buffer)
        set_min_output_buffer(scrambler_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.scrambler_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(scrambler_sptr self) -> float"""
        return _my_lte_swig.scrambler_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(scrambler_sptr self) -> float"""
        return _my_lte_swig.scrambler_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(scrambler_sptr self) -> float"""
        return _my_lte_swig.scrambler_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(scrambler_sptr self) -> float"""
        return _my_lte_swig.scrambler_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(scrambler_sptr self) -> float"""
        return _my_lte_swig.scrambler_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(scrambler_sptr self) -> float"""
        return _my_lte_swig.scrambler_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(scrambler_sptr self, int which) -> float
        pc_input_buffers_full(scrambler_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.scrambler_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(scrambler_sptr self, int which) -> float
        pc_input_buffers_full_avg(scrambler_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.scrambler_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(scrambler_sptr self, int which) -> float
        pc_input_buffers_full_var(scrambler_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.scrambler_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(scrambler_sptr self, int which) -> float
        pc_output_buffers_full(scrambler_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.scrambler_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(scrambler_sptr self, int which) -> float
        pc_output_buffers_full_avg(scrambler_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.scrambler_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(scrambler_sptr self, int which) -> float
        pc_output_buffers_full_var(scrambler_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.scrambler_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(scrambler_sptr self) -> float"""
        return _my_lte_swig.scrambler_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(scrambler_sptr self) -> float"""
        return _my_lte_swig.scrambler_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(scrambler_sptr self) -> float"""
        return _my_lte_swig.scrambler_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(scrambler_sptr self) -> float"""
        return _my_lte_swig.scrambler_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(scrambler_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.scrambler_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(scrambler_sptr self)"""
        return _my_lte_swig.scrambler_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(scrambler_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.scrambler_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(scrambler_sptr self) -> int"""
        return _my_lte_swig.scrambler_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(scrambler_sptr self) -> int"""
        return _my_lte_swig.scrambler_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(scrambler_sptr self, int priority) -> int"""
        return _my_lte_swig.scrambler_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(scrambler_sptr self) -> std::string"""
        return _my_lte_swig.scrambler_sptr_name(self)

    def symbol_name(self):
        """symbol_name(scrambler_sptr self) -> std::string"""
        return _my_lte_swig.scrambler_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(scrambler_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.scrambler_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(scrambler_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.scrambler_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(scrambler_sptr self) -> long"""
        return _my_lte_swig.scrambler_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(scrambler_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.scrambler_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(scrambler_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.scrambler_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(scrambler_sptr self) -> std::string"""
        return _my_lte_swig.scrambler_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(scrambler_sptr self, std::string name)"""
        return _my_lte_swig.scrambler_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(scrambler_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.scrambler_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(scrambler_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.scrambler_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(scrambler_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.scrambler_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(scrambler_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.scrambler_sptr_message_subscribers(self, *args, **kwargs)

scrambler_sptr_swigregister = _my_lte_swig.scrambler_sptr_swigregister
scrambler_sptr_swigregister(scrambler_sptr)

scrambler_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
scrambler = scrambler.make;

class modulation_mapper(object):
    """Proxy of C++ gr::my_lte::modulation_mapper class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(std::string mod_type, uint32 set_align) -> modulation_mapper_sptr"""
        return _my_lte_swig.modulation_mapper_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_modulation_mapper
    __del__ = lambda self : None;
modulation_mapper_swigregister = _my_lte_swig.modulation_mapper_swigregister
modulation_mapper_swigregister(modulation_mapper)

def modulation_mapper_make(*args, **kwargs):
  """modulation_mapper_make(std::string mod_type, uint32 set_align) -> modulation_mapper_sptr"""
  return _my_lte_swig.modulation_mapper_make(*args, **kwargs)

class modulation_mapper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::modulation_mapper)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::modulation_mapper)> self) -> modulation_mapper_sptr
        __init__(boost::shared_ptr<(gr::my_lte::modulation_mapper)> self, modulation_mapper p) -> modulation_mapper_sptr
        """
        this = _my_lte_swig.new_modulation_mapper_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(modulation_mapper_sptr self) -> modulation_mapper"""
        return _my_lte_swig.modulation_mapper_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_modulation_mapper_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(modulation_mapper_sptr self, std::string mod_type, uint32 set_align) -> modulation_mapper_sptr"""
        return _my_lte_swig.modulation_mapper_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(modulation_mapper_sptr self) -> unsigned int"""
        return _my_lte_swig.modulation_mapper_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(modulation_mapper_sptr self, int which, int delay)
        declare_sample_delay(modulation_mapper_sptr self, unsigned int delay)
        """
        return _my_lte_swig.modulation_mapper_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(modulation_mapper_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.modulation_mapper_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(modulation_mapper_sptr self) -> int"""
        return _my_lte_swig.modulation_mapper_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(modulation_mapper_sptr self) -> double"""
        return _my_lte_swig.modulation_mapper_sptr_relative_rate(self)

    def start(self):
        """start(modulation_mapper_sptr self) -> bool"""
        return _my_lte_swig.modulation_mapper_sptr_start(self)

    def stop(self):
        """stop(modulation_mapper_sptr self) -> bool"""
        return _my_lte_swig.modulation_mapper_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(modulation_mapper_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.modulation_mapper_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(modulation_mapper_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.modulation_mapper_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(modulation_mapper_sptr self) -> int"""
        return _my_lte_swig.modulation_mapper_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(modulation_mapper_sptr self, int m)"""
        return _my_lte_swig.modulation_mapper_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(modulation_mapper_sptr self)"""
        return _my_lte_swig.modulation_mapper_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(modulation_mapper_sptr self) -> bool"""
        return _my_lte_swig.modulation_mapper_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(modulation_mapper_sptr self, int m)"""
        return _my_lte_swig.modulation_mapper_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(modulation_mapper_sptr self) -> int"""
        return _my_lte_swig.modulation_mapper_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(modulation_mapper_sptr self, int i) -> long"""
        return _my_lte_swig.modulation_mapper_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(modulation_mapper_sptr self, long max_output_buffer)
        set_max_output_buffer(modulation_mapper_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.modulation_mapper_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(modulation_mapper_sptr self, int i) -> long"""
        return _my_lte_swig.modulation_mapper_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(modulation_mapper_sptr self, long min_output_buffer)
        set_min_output_buffer(modulation_mapper_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.modulation_mapper_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(modulation_mapper_sptr self) -> float"""
        return _my_lte_swig.modulation_mapper_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(modulation_mapper_sptr self) -> float"""
        return _my_lte_swig.modulation_mapper_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(modulation_mapper_sptr self) -> float"""
        return _my_lte_swig.modulation_mapper_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(modulation_mapper_sptr self) -> float"""
        return _my_lte_swig.modulation_mapper_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(modulation_mapper_sptr self) -> float"""
        return _my_lte_swig.modulation_mapper_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(modulation_mapper_sptr self) -> float"""
        return _my_lte_swig.modulation_mapper_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(modulation_mapper_sptr self, int which) -> float
        pc_input_buffers_full(modulation_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.modulation_mapper_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(modulation_mapper_sptr self, int which) -> float
        pc_input_buffers_full_avg(modulation_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.modulation_mapper_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(modulation_mapper_sptr self, int which) -> float
        pc_input_buffers_full_var(modulation_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.modulation_mapper_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(modulation_mapper_sptr self, int which) -> float
        pc_output_buffers_full(modulation_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.modulation_mapper_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(modulation_mapper_sptr self, int which) -> float
        pc_output_buffers_full_avg(modulation_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.modulation_mapper_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(modulation_mapper_sptr self, int which) -> float
        pc_output_buffers_full_var(modulation_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.modulation_mapper_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(modulation_mapper_sptr self) -> float"""
        return _my_lte_swig.modulation_mapper_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(modulation_mapper_sptr self) -> float"""
        return _my_lte_swig.modulation_mapper_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(modulation_mapper_sptr self) -> float"""
        return _my_lte_swig.modulation_mapper_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(modulation_mapper_sptr self) -> float"""
        return _my_lte_swig.modulation_mapper_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(modulation_mapper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.modulation_mapper_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(modulation_mapper_sptr self)"""
        return _my_lte_swig.modulation_mapper_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(modulation_mapper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.modulation_mapper_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(modulation_mapper_sptr self) -> int"""
        return _my_lte_swig.modulation_mapper_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(modulation_mapper_sptr self) -> int"""
        return _my_lte_swig.modulation_mapper_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(modulation_mapper_sptr self, int priority) -> int"""
        return _my_lte_swig.modulation_mapper_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(modulation_mapper_sptr self) -> std::string"""
        return _my_lte_swig.modulation_mapper_sptr_name(self)

    def symbol_name(self):
        """symbol_name(modulation_mapper_sptr self) -> std::string"""
        return _my_lte_swig.modulation_mapper_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(modulation_mapper_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.modulation_mapper_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(modulation_mapper_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.modulation_mapper_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(modulation_mapper_sptr self) -> long"""
        return _my_lte_swig.modulation_mapper_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(modulation_mapper_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.modulation_mapper_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(modulation_mapper_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.modulation_mapper_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(modulation_mapper_sptr self) -> std::string"""
        return _my_lte_swig.modulation_mapper_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(modulation_mapper_sptr self, std::string name)"""
        return _my_lte_swig.modulation_mapper_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(modulation_mapper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.modulation_mapper_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(modulation_mapper_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.modulation_mapper_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(modulation_mapper_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.modulation_mapper_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(modulation_mapper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.modulation_mapper_sptr_message_subscribers(self, *args, **kwargs)

modulation_mapper_sptr_swigregister = _my_lte_swig.modulation_mapper_sptr_swigregister
modulation_mapper_sptr_swigregister(modulation_mapper_sptr)

modulation_mapper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
modulation_mapper = modulation_mapper.make;

class layer_mapper(object):
    """Proxy of C++ gr::my_lte::layer_mapper class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(uint32 N_ant, uint32 set_align) -> layer_mapper_sptr"""
        return _my_lte_swig.layer_mapper_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_layer_mapper
    __del__ = lambda self : None;
layer_mapper_swigregister = _my_lte_swig.layer_mapper_swigregister
layer_mapper_swigregister(layer_mapper)

def layer_mapper_make(*args, **kwargs):
  """layer_mapper_make(uint32 N_ant, uint32 set_align) -> layer_mapper_sptr"""
  return _my_lte_swig.layer_mapper_make(*args, **kwargs)

class layer_mapper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::layer_mapper)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::layer_mapper)> self) -> layer_mapper_sptr
        __init__(boost::shared_ptr<(gr::my_lte::layer_mapper)> self, layer_mapper p) -> layer_mapper_sptr
        """
        this = _my_lte_swig.new_layer_mapper_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(layer_mapper_sptr self) -> layer_mapper"""
        return _my_lte_swig.layer_mapper_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_layer_mapper_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(layer_mapper_sptr self, uint32 N_ant, uint32 set_align) -> layer_mapper_sptr"""
        return _my_lte_swig.layer_mapper_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(layer_mapper_sptr self) -> unsigned int"""
        return _my_lte_swig.layer_mapper_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(layer_mapper_sptr self, int which, int delay)
        declare_sample_delay(layer_mapper_sptr self, unsigned int delay)
        """
        return _my_lte_swig.layer_mapper_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(layer_mapper_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.layer_mapper_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(layer_mapper_sptr self) -> int"""
        return _my_lte_swig.layer_mapper_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(layer_mapper_sptr self) -> double"""
        return _my_lte_swig.layer_mapper_sptr_relative_rate(self)

    def start(self):
        """start(layer_mapper_sptr self) -> bool"""
        return _my_lte_swig.layer_mapper_sptr_start(self)

    def stop(self):
        """stop(layer_mapper_sptr self) -> bool"""
        return _my_lte_swig.layer_mapper_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(layer_mapper_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.layer_mapper_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(layer_mapper_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.layer_mapper_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(layer_mapper_sptr self) -> int"""
        return _my_lte_swig.layer_mapper_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(layer_mapper_sptr self, int m)"""
        return _my_lte_swig.layer_mapper_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(layer_mapper_sptr self)"""
        return _my_lte_swig.layer_mapper_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(layer_mapper_sptr self) -> bool"""
        return _my_lte_swig.layer_mapper_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(layer_mapper_sptr self, int m)"""
        return _my_lte_swig.layer_mapper_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(layer_mapper_sptr self) -> int"""
        return _my_lte_swig.layer_mapper_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(layer_mapper_sptr self, int i) -> long"""
        return _my_lte_swig.layer_mapper_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(layer_mapper_sptr self, long max_output_buffer)
        set_max_output_buffer(layer_mapper_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.layer_mapper_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(layer_mapper_sptr self, int i) -> long"""
        return _my_lte_swig.layer_mapper_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(layer_mapper_sptr self, long min_output_buffer)
        set_min_output_buffer(layer_mapper_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.layer_mapper_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(layer_mapper_sptr self) -> float"""
        return _my_lte_swig.layer_mapper_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(layer_mapper_sptr self) -> float"""
        return _my_lte_swig.layer_mapper_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(layer_mapper_sptr self) -> float"""
        return _my_lte_swig.layer_mapper_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(layer_mapper_sptr self) -> float"""
        return _my_lte_swig.layer_mapper_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(layer_mapper_sptr self) -> float"""
        return _my_lte_swig.layer_mapper_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(layer_mapper_sptr self) -> float"""
        return _my_lte_swig.layer_mapper_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(layer_mapper_sptr self, int which) -> float
        pc_input_buffers_full(layer_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.layer_mapper_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(layer_mapper_sptr self, int which) -> float
        pc_input_buffers_full_avg(layer_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.layer_mapper_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(layer_mapper_sptr self, int which) -> float
        pc_input_buffers_full_var(layer_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.layer_mapper_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(layer_mapper_sptr self, int which) -> float
        pc_output_buffers_full(layer_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.layer_mapper_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(layer_mapper_sptr self, int which) -> float
        pc_output_buffers_full_avg(layer_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.layer_mapper_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(layer_mapper_sptr self, int which) -> float
        pc_output_buffers_full_var(layer_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.layer_mapper_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(layer_mapper_sptr self) -> float"""
        return _my_lte_swig.layer_mapper_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(layer_mapper_sptr self) -> float"""
        return _my_lte_swig.layer_mapper_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(layer_mapper_sptr self) -> float"""
        return _my_lte_swig.layer_mapper_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(layer_mapper_sptr self) -> float"""
        return _my_lte_swig.layer_mapper_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(layer_mapper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.layer_mapper_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(layer_mapper_sptr self)"""
        return _my_lte_swig.layer_mapper_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(layer_mapper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.layer_mapper_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(layer_mapper_sptr self) -> int"""
        return _my_lte_swig.layer_mapper_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(layer_mapper_sptr self) -> int"""
        return _my_lte_swig.layer_mapper_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(layer_mapper_sptr self, int priority) -> int"""
        return _my_lte_swig.layer_mapper_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(layer_mapper_sptr self) -> std::string"""
        return _my_lte_swig.layer_mapper_sptr_name(self)

    def symbol_name(self):
        """symbol_name(layer_mapper_sptr self) -> std::string"""
        return _my_lte_swig.layer_mapper_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(layer_mapper_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.layer_mapper_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(layer_mapper_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.layer_mapper_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(layer_mapper_sptr self) -> long"""
        return _my_lte_swig.layer_mapper_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(layer_mapper_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.layer_mapper_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(layer_mapper_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.layer_mapper_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(layer_mapper_sptr self) -> std::string"""
        return _my_lte_swig.layer_mapper_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(layer_mapper_sptr self, std::string name)"""
        return _my_lte_swig.layer_mapper_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(layer_mapper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.layer_mapper_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(layer_mapper_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.layer_mapper_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(layer_mapper_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.layer_mapper_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(layer_mapper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.layer_mapper_sptr_message_subscribers(self, *args, **kwargs)

layer_mapper_sptr_swigregister = _my_lte_swig.layer_mapper_sptr_swigregister
layer_mapper_sptr_swigregister(layer_mapper_sptr)

layer_mapper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
layer_mapper = layer_mapper.make;

class precoder(object):
    """Proxy of C++ gr::my_lte::precoder class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(uint32 N_ant, uint32 set_align, bool is_phich, int n_phich_group, bool normal_cp) -> precoder_sptr"""
        return _my_lte_swig.precoder_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_precoder
    __del__ = lambda self : None;
precoder_swigregister = _my_lte_swig.precoder_swigregister
precoder_swigregister(precoder)

def precoder_make(*args, **kwargs):
  """precoder_make(uint32 N_ant, uint32 set_align, bool is_phich, int n_phich_group, bool normal_cp) -> precoder_sptr"""
  return _my_lte_swig.precoder_make(*args, **kwargs)

class precoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::precoder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::precoder)> self) -> precoder_sptr
        __init__(boost::shared_ptr<(gr::my_lte::precoder)> self, precoder p) -> precoder_sptr
        """
        this = _my_lte_swig.new_precoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(precoder_sptr self) -> precoder"""
        return _my_lte_swig.precoder_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_precoder_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(precoder_sptr self, uint32 N_ant, uint32 set_align, bool is_phich, int n_phich_group, bool normal_cp) -> precoder_sptr"""
        return _my_lte_swig.precoder_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(precoder_sptr self) -> unsigned int"""
        return _my_lte_swig.precoder_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(precoder_sptr self, int which, int delay)
        declare_sample_delay(precoder_sptr self, unsigned int delay)
        """
        return _my_lte_swig.precoder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(precoder_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.precoder_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(precoder_sptr self) -> int"""
        return _my_lte_swig.precoder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(precoder_sptr self) -> double"""
        return _my_lte_swig.precoder_sptr_relative_rate(self)

    def start(self):
        """start(precoder_sptr self) -> bool"""
        return _my_lte_swig.precoder_sptr_start(self)

    def stop(self):
        """stop(precoder_sptr self) -> bool"""
        return _my_lte_swig.precoder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(precoder_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.precoder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(precoder_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.precoder_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(precoder_sptr self) -> int"""
        return _my_lte_swig.precoder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(precoder_sptr self, int m)"""
        return _my_lte_swig.precoder_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(precoder_sptr self)"""
        return _my_lte_swig.precoder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(precoder_sptr self) -> bool"""
        return _my_lte_swig.precoder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(precoder_sptr self, int m)"""
        return _my_lte_swig.precoder_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(precoder_sptr self) -> int"""
        return _my_lte_swig.precoder_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(precoder_sptr self, int i) -> long"""
        return _my_lte_swig.precoder_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(precoder_sptr self, long max_output_buffer)
        set_max_output_buffer(precoder_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.precoder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(precoder_sptr self, int i) -> long"""
        return _my_lte_swig.precoder_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(precoder_sptr self, long min_output_buffer)
        set_min_output_buffer(precoder_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.precoder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(precoder_sptr self) -> float"""
        return _my_lte_swig.precoder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(precoder_sptr self) -> float"""
        return _my_lte_swig.precoder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(precoder_sptr self) -> float"""
        return _my_lte_swig.precoder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(precoder_sptr self) -> float"""
        return _my_lte_swig.precoder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(precoder_sptr self) -> float"""
        return _my_lte_swig.precoder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(precoder_sptr self) -> float"""
        return _my_lte_swig.precoder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(precoder_sptr self, int which) -> float
        pc_input_buffers_full(precoder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.precoder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(precoder_sptr self, int which) -> float
        pc_input_buffers_full_avg(precoder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.precoder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(precoder_sptr self, int which) -> float
        pc_input_buffers_full_var(precoder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.precoder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(precoder_sptr self, int which) -> float
        pc_output_buffers_full(precoder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.precoder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(precoder_sptr self, int which) -> float
        pc_output_buffers_full_avg(precoder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.precoder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(precoder_sptr self, int which) -> float
        pc_output_buffers_full_var(precoder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.precoder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(precoder_sptr self) -> float"""
        return _my_lte_swig.precoder_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(precoder_sptr self) -> float"""
        return _my_lte_swig.precoder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(precoder_sptr self) -> float"""
        return _my_lte_swig.precoder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(precoder_sptr self) -> float"""
        return _my_lte_swig.precoder_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(precoder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.precoder_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(precoder_sptr self)"""
        return _my_lte_swig.precoder_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(precoder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.precoder_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(precoder_sptr self) -> int"""
        return _my_lte_swig.precoder_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(precoder_sptr self) -> int"""
        return _my_lte_swig.precoder_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(precoder_sptr self, int priority) -> int"""
        return _my_lte_swig.precoder_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(precoder_sptr self) -> std::string"""
        return _my_lte_swig.precoder_sptr_name(self)

    def symbol_name(self):
        """symbol_name(precoder_sptr self) -> std::string"""
        return _my_lte_swig.precoder_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(precoder_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.precoder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(precoder_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.precoder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(precoder_sptr self) -> long"""
        return _my_lte_swig.precoder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(precoder_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.precoder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(precoder_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.precoder_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(precoder_sptr self) -> std::string"""
        return _my_lte_swig.precoder_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(precoder_sptr self, std::string name)"""
        return _my_lte_swig.precoder_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(precoder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.precoder_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(precoder_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.precoder_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(precoder_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.precoder_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(precoder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.precoder_sptr_message_subscribers(self, *args, **kwargs)

precoder_sptr_swigregister = _my_lte_swig.precoder_sptr_swigregister
precoder_sptr_swigregister(precoder_sptr)

precoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
precoder = precoder.make;

class conv_enc(object):
    """Proxy of C++ gr::my_lte::conv_enc class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(uint32 constraint_length, uint32 rate, std::vector< uint32 > g, bool tail_bit) -> conv_enc_sptr"""
        return _my_lte_swig.conv_enc_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_conv_enc
    __del__ = lambda self : None;
conv_enc_swigregister = _my_lte_swig.conv_enc_swigregister
conv_enc_swigregister(conv_enc)

def conv_enc_make(*args, **kwargs):
  """conv_enc_make(uint32 constraint_length, uint32 rate, std::vector< uint32 > g, bool tail_bit) -> conv_enc_sptr"""
  return _my_lte_swig.conv_enc_make(*args, **kwargs)

class conv_enc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::conv_enc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::conv_enc)> self) -> conv_enc_sptr
        __init__(boost::shared_ptr<(gr::my_lte::conv_enc)> self, conv_enc p) -> conv_enc_sptr
        """
        this = _my_lte_swig.new_conv_enc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(conv_enc_sptr self) -> conv_enc"""
        return _my_lte_swig.conv_enc_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_conv_enc_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(conv_enc_sptr self, uint32 constraint_length, uint32 rate, std::vector< uint32 > g, bool tail_bit) -> conv_enc_sptr"""
        return _my_lte_swig.conv_enc_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(conv_enc_sptr self) -> unsigned int"""
        return _my_lte_swig.conv_enc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(conv_enc_sptr self, int which, int delay)
        declare_sample_delay(conv_enc_sptr self, unsigned int delay)
        """
        return _my_lte_swig.conv_enc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(conv_enc_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.conv_enc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(conv_enc_sptr self) -> int"""
        return _my_lte_swig.conv_enc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(conv_enc_sptr self) -> double"""
        return _my_lte_swig.conv_enc_sptr_relative_rate(self)

    def start(self):
        """start(conv_enc_sptr self) -> bool"""
        return _my_lte_swig.conv_enc_sptr_start(self)

    def stop(self):
        """stop(conv_enc_sptr self) -> bool"""
        return _my_lte_swig.conv_enc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(conv_enc_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.conv_enc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(conv_enc_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.conv_enc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(conv_enc_sptr self) -> int"""
        return _my_lte_swig.conv_enc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(conv_enc_sptr self, int m)"""
        return _my_lte_swig.conv_enc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(conv_enc_sptr self)"""
        return _my_lte_swig.conv_enc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(conv_enc_sptr self) -> bool"""
        return _my_lte_swig.conv_enc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(conv_enc_sptr self, int m)"""
        return _my_lte_swig.conv_enc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(conv_enc_sptr self) -> int"""
        return _my_lte_swig.conv_enc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(conv_enc_sptr self, int i) -> long"""
        return _my_lte_swig.conv_enc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(conv_enc_sptr self, long max_output_buffer)
        set_max_output_buffer(conv_enc_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.conv_enc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(conv_enc_sptr self, int i) -> long"""
        return _my_lte_swig.conv_enc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(conv_enc_sptr self, long min_output_buffer)
        set_min_output_buffer(conv_enc_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.conv_enc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(conv_enc_sptr self) -> float"""
        return _my_lte_swig.conv_enc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(conv_enc_sptr self) -> float"""
        return _my_lte_swig.conv_enc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(conv_enc_sptr self) -> float"""
        return _my_lte_swig.conv_enc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(conv_enc_sptr self) -> float"""
        return _my_lte_swig.conv_enc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(conv_enc_sptr self) -> float"""
        return _my_lte_swig.conv_enc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(conv_enc_sptr self) -> float"""
        return _my_lte_swig.conv_enc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(conv_enc_sptr self, int which) -> float
        pc_input_buffers_full(conv_enc_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.conv_enc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(conv_enc_sptr self, int which) -> float
        pc_input_buffers_full_avg(conv_enc_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.conv_enc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(conv_enc_sptr self, int which) -> float
        pc_input_buffers_full_var(conv_enc_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.conv_enc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(conv_enc_sptr self, int which) -> float
        pc_output_buffers_full(conv_enc_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.conv_enc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(conv_enc_sptr self, int which) -> float
        pc_output_buffers_full_avg(conv_enc_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.conv_enc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(conv_enc_sptr self, int which) -> float
        pc_output_buffers_full_var(conv_enc_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.conv_enc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(conv_enc_sptr self) -> float"""
        return _my_lte_swig.conv_enc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(conv_enc_sptr self) -> float"""
        return _my_lte_swig.conv_enc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(conv_enc_sptr self) -> float"""
        return _my_lte_swig.conv_enc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(conv_enc_sptr self) -> float"""
        return _my_lte_swig.conv_enc_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(conv_enc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.conv_enc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(conv_enc_sptr self)"""
        return _my_lte_swig.conv_enc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(conv_enc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.conv_enc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(conv_enc_sptr self) -> int"""
        return _my_lte_swig.conv_enc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(conv_enc_sptr self) -> int"""
        return _my_lte_swig.conv_enc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(conv_enc_sptr self, int priority) -> int"""
        return _my_lte_swig.conv_enc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(conv_enc_sptr self) -> std::string"""
        return _my_lte_swig.conv_enc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(conv_enc_sptr self) -> std::string"""
        return _my_lte_swig.conv_enc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(conv_enc_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.conv_enc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(conv_enc_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.conv_enc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(conv_enc_sptr self) -> long"""
        return _my_lte_swig.conv_enc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(conv_enc_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.conv_enc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(conv_enc_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.conv_enc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(conv_enc_sptr self) -> std::string"""
        return _my_lte_swig.conv_enc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(conv_enc_sptr self, std::string name)"""
        return _my_lte_swig.conv_enc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(conv_enc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.conv_enc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(conv_enc_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.conv_enc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(conv_enc_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.conv_enc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(conv_enc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.conv_enc_sptr_message_subscribers(self, *args, **kwargs)

conv_enc_sptr_swigregister = _my_lte_swig.conv_enc_sptr_swigregister
conv_enc_sptr_swigregister(conv_enc_sptr)

conv_enc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
conv_enc = conv_enc.make;

class rate_match_conv(object):
    """Proxy of C++ gr::my_lte::rate_match_conv class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(uint32 N_e_bits) -> rate_match_conv_sptr"""
        return _my_lte_swig.rate_match_conv_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_rate_match_conv
    __del__ = lambda self : None;
rate_match_conv_swigregister = _my_lte_swig.rate_match_conv_swigregister
rate_match_conv_swigregister(rate_match_conv)

def rate_match_conv_make(*args, **kwargs):
  """rate_match_conv_make(uint32 N_e_bits) -> rate_match_conv_sptr"""
  return _my_lte_swig.rate_match_conv_make(*args, **kwargs)

class rate_match_conv_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::rate_match_conv)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::rate_match_conv)> self) -> rate_match_conv_sptr
        __init__(boost::shared_ptr<(gr::my_lte::rate_match_conv)> self, rate_match_conv p) -> rate_match_conv_sptr
        """
        this = _my_lte_swig.new_rate_match_conv_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(rate_match_conv_sptr self) -> rate_match_conv"""
        return _my_lte_swig.rate_match_conv_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_rate_match_conv_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(rate_match_conv_sptr self, uint32 N_e_bits) -> rate_match_conv_sptr"""
        return _my_lte_swig.rate_match_conv_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(rate_match_conv_sptr self) -> unsigned int"""
        return _my_lte_swig.rate_match_conv_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(rate_match_conv_sptr self, int which, int delay)
        declare_sample_delay(rate_match_conv_sptr self, unsigned int delay)
        """
        return _my_lte_swig.rate_match_conv_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(rate_match_conv_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.rate_match_conv_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(rate_match_conv_sptr self) -> int"""
        return _my_lte_swig.rate_match_conv_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(rate_match_conv_sptr self) -> double"""
        return _my_lte_swig.rate_match_conv_sptr_relative_rate(self)

    def start(self):
        """start(rate_match_conv_sptr self) -> bool"""
        return _my_lte_swig.rate_match_conv_sptr_start(self)

    def stop(self):
        """stop(rate_match_conv_sptr self) -> bool"""
        return _my_lte_swig.rate_match_conv_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(rate_match_conv_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.rate_match_conv_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(rate_match_conv_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.rate_match_conv_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(rate_match_conv_sptr self) -> int"""
        return _my_lte_swig.rate_match_conv_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(rate_match_conv_sptr self, int m)"""
        return _my_lte_swig.rate_match_conv_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(rate_match_conv_sptr self)"""
        return _my_lte_swig.rate_match_conv_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(rate_match_conv_sptr self) -> bool"""
        return _my_lte_swig.rate_match_conv_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(rate_match_conv_sptr self, int m)"""
        return _my_lte_swig.rate_match_conv_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(rate_match_conv_sptr self) -> int"""
        return _my_lte_swig.rate_match_conv_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(rate_match_conv_sptr self, int i) -> long"""
        return _my_lte_swig.rate_match_conv_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(rate_match_conv_sptr self, long max_output_buffer)
        set_max_output_buffer(rate_match_conv_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.rate_match_conv_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(rate_match_conv_sptr self, int i) -> long"""
        return _my_lte_swig.rate_match_conv_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(rate_match_conv_sptr self, long min_output_buffer)
        set_min_output_buffer(rate_match_conv_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.rate_match_conv_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(rate_match_conv_sptr self) -> float"""
        return _my_lte_swig.rate_match_conv_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(rate_match_conv_sptr self) -> float"""
        return _my_lte_swig.rate_match_conv_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(rate_match_conv_sptr self) -> float"""
        return _my_lte_swig.rate_match_conv_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(rate_match_conv_sptr self) -> float"""
        return _my_lte_swig.rate_match_conv_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(rate_match_conv_sptr self) -> float"""
        return _my_lte_swig.rate_match_conv_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(rate_match_conv_sptr self) -> float"""
        return _my_lte_swig.rate_match_conv_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(rate_match_conv_sptr self, int which) -> float
        pc_input_buffers_full(rate_match_conv_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.rate_match_conv_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(rate_match_conv_sptr self, int which) -> float
        pc_input_buffers_full_avg(rate_match_conv_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.rate_match_conv_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(rate_match_conv_sptr self, int which) -> float
        pc_input_buffers_full_var(rate_match_conv_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.rate_match_conv_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(rate_match_conv_sptr self, int which) -> float
        pc_output_buffers_full(rate_match_conv_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.rate_match_conv_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(rate_match_conv_sptr self, int which) -> float
        pc_output_buffers_full_avg(rate_match_conv_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.rate_match_conv_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(rate_match_conv_sptr self, int which) -> float
        pc_output_buffers_full_var(rate_match_conv_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.rate_match_conv_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(rate_match_conv_sptr self) -> float"""
        return _my_lte_swig.rate_match_conv_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(rate_match_conv_sptr self) -> float"""
        return _my_lte_swig.rate_match_conv_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(rate_match_conv_sptr self) -> float"""
        return _my_lte_swig.rate_match_conv_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(rate_match_conv_sptr self) -> float"""
        return _my_lte_swig.rate_match_conv_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(rate_match_conv_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.rate_match_conv_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(rate_match_conv_sptr self)"""
        return _my_lte_swig.rate_match_conv_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(rate_match_conv_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.rate_match_conv_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(rate_match_conv_sptr self) -> int"""
        return _my_lte_swig.rate_match_conv_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(rate_match_conv_sptr self) -> int"""
        return _my_lte_swig.rate_match_conv_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(rate_match_conv_sptr self, int priority) -> int"""
        return _my_lte_swig.rate_match_conv_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(rate_match_conv_sptr self) -> std::string"""
        return _my_lte_swig.rate_match_conv_sptr_name(self)

    def symbol_name(self):
        """symbol_name(rate_match_conv_sptr self) -> std::string"""
        return _my_lte_swig.rate_match_conv_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(rate_match_conv_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.rate_match_conv_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(rate_match_conv_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.rate_match_conv_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(rate_match_conv_sptr self) -> long"""
        return _my_lte_swig.rate_match_conv_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(rate_match_conv_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.rate_match_conv_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(rate_match_conv_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.rate_match_conv_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(rate_match_conv_sptr self) -> std::string"""
        return _my_lte_swig.rate_match_conv_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(rate_match_conv_sptr self, std::string name)"""
        return _my_lte_swig.rate_match_conv_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(rate_match_conv_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.rate_match_conv_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(rate_match_conv_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.rate_match_conv_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(rate_match_conv_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.rate_match_conv_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(rate_match_conv_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.rate_match_conv_sptr_message_subscribers(self, *args, **kwargs)

rate_match_conv_sptr_swigregister = _my_lte_swig.rate_match_conv_sptr_swigregister
rate_match_conv_sptr_swigregister(rate_match_conv_sptr)

rate_match_conv_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
rate_match_conv = rate_match_conv.make;

class code_block_concatenation(object):
    """Proxy of C++ gr::my_lte::code_block_concatenation class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(uint32 N_code_block, uint32 N_e_bit_max, uint32 set_align) -> code_block_concatenation_sptr"""
        return _my_lte_swig.code_block_concatenation_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_code_block_concatenation
    __del__ = lambda self : None;
code_block_concatenation_swigregister = _my_lte_swig.code_block_concatenation_swigregister
code_block_concatenation_swigregister(code_block_concatenation)

def code_block_concatenation_make(*args, **kwargs):
  """code_block_concatenation_make(uint32 N_code_block, uint32 N_e_bit_max, uint32 set_align) -> code_block_concatenation_sptr"""
  return _my_lte_swig.code_block_concatenation_make(*args, **kwargs)

class code_block_concatenation_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::code_block_concatenation)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::code_block_concatenation)> self) -> code_block_concatenation_sptr
        __init__(boost::shared_ptr<(gr::my_lte::code_block_concatenation)> self, code_block_concatenation p) -> code_block_concatenation_sptr
        """
        this = _my_lte_swig.new_code_block_concatenation_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(code_block_concatenation_sptr self) -> code_block_concatenation"""
        return _my_lte_swig.code_block_concatenation_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_code_block_concatenation_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(code_block_concatenation_sptr self, uint32 N_code_block, uint32 N_e_bit_max, uint32 set_align) -> code_block_concatenation_sptr"""
        return _my_lte_swig.code_block_concatenation_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(code_block_concatenation_sptr self) -> unsigned int"""
        return _my_lte_swig.code_block_concatenation_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(code_block_concatenation_sptr self, int which, int delay)
        declare_sample_delay(code_block_concatenation_sptr self, unsigned int delay)
        """
        return _my_lte_swig.code_block_concatenation_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(code_block_concatenation_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.code_block_concatenation_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(code_block_concatenation_sptr self) -> int"""
        return _my_lte_swig.code_block_concatenation_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(code_block_concatenation_sptr self) -> double"""
        return _my_lte_swig.code_block_concatenation_sptr_relative_rate(self)

    def start(self):
        """start(code_block_concatenation_sptr self) -> bool"""
        return _my_lte_swig.code_block_concatenation_sptr_start(self)

    def stop(self):
        """stop(code_block_concatenation_sptr self) -> bool"""
        return _my_lte_swig.code_block_concatenation_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(code_block_concatenation_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.code_block_concatenation_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(code_block_concatenation_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.code_block_concatenation_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(code_block_concatenation_sptr self) -> int"""
        return _my_lte_swig.code_block_concatenation_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(code_block_concatenation_sptr self, int m)"""
        return _my_lte_swig.code_block_concatenation_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(code_block_concatenation_sptr self)"""
        return _my_lte_swig.code_block_concatenation_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(code_block_concatenation_sptr self) -> bool"""
        return _my_lte_swig.code_block_concatenation_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(code_block_concatenation_sptr self, int m)"""
        return _my_lte_swig.code_block_concatenation_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(code_block_concatenation_sptr self) -> int"""
        return _my_lte_swig.code_block_concatenation_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(code_block_concatenation_sptr self, int i) -> long"""
        return _my_lte_swig.code_block_concatenation_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(code_block_concatenation_sptr self, long max_output_buffer)
        set_max_output_buffer(code_block_concatenation_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.code_block_concatenation_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(code_block_concatenation_sptr self, int i) -> long"""
        return _my_lte_swig.code_block_concatenation_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(code_block_concatenation_sptr self, long min_output_buffer)
        set_min_output_buffer(code_block_concatenation_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.code_block_concatenation_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(code_block_concatenation_sptr self) -> float"""
        return _my_lte_swig.code_block_concatenation_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(code_block_concatenation_sptr self) -> float"""
        return _my_lte_swig.code_block_concatenation_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(code_block_concatenation_sptr self) -> float"""
        return _my_lte_swig.code_block_concatenation_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(code_block_concatenation_sptr self) -> float"""
        return _my_lte_swig.code_block_concatenation_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(code_block_concatenation_sptr self) -> float"""
        return _my_lte_swig.code_block_concatenation_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(code_block_concatenation_sptr self) -> float"""
        return _my_lte_swig.code_block_concatenation_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(code_block_concatenation_sptr self, int which) -> float
        pc_input_buffers_full(code_block_concatenation_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.code_block_concatenation_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(code_block_concatenation_sptr self, int which) -> float
        pc_input_buffers_full_avg(code_block_concatenation_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.code_block_concatenation_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(code_block_concatenation_sptr self, int which) -> float
        pc_input_buffers_full_var(code_block_concatenation_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.code_block_concatenation_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(code_block_concatenation_sptr self, int which) -> float
        pc_output_buffers_full(code_block_concatenation_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.code_block_concatenation_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(code_block_concatenation_sptr self, int which) -> float
        pc_output_buffers_full_avg(code_block_concatenation_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.code_block_concatenation_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(code_block_concatenation_sptr self, int which) -> float
        pc_output_buffers_full_var(code_block_concatenation_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.code_block_concatenation_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(code_block_concatenation_sptr self) -> float"""
        return _my_lte_swig.code_block_concatenation_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(code_block_concatenation_sptr self) -> float"""
        return _my_lte_swig.code_block_concatenation_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(code_block_concatenation_sptr self) -> float"""
        return _my_lte_swig.code_block_concatenation_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(code_block_concatenation_sptr self) -> float"""
        return _my_lte_swig.code_block_concatenation_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(code_block_concatenation_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.code_block_concatenation_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(code_block_concatenation_sptr self)"""
        return _my_lte_swig.code_block_concatenation_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(code_block_concatenation_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.code_block_concatenation_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(code_block_concatenation_sptr self) -> int"""
        return _my_lte_swig.code_block_concatenation_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(code_block_concatenation_sptr self) -> int"""
        return _my_lte_swig.code_block_concatenation_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(code_block_concatenation_sptr self, int priority) -> int"""
        return _my_lte_swig.code_block_concatenation_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(code_block_concatenation_sptr self) -> std::string"""
        return _my_lte_swig.code_block_concatenation_sptr_name(self)

    def symbol_name(self):
        """symbol_name(code_block_concatenation_sptr self) -> std::string"""
        return _my_lte_swig.code_block_concatenation_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(code_block_concatenation_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.code_block_concatenation_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(code_block_concatenation_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.code_block_concatenation_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(code_block_concatenation_sptr self) -> long"""
        return _my_lte_swig.code_block_concatenation_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(code_block_concatenation_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.code_block_concatenation_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(code_block_concatenation_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.code_block_concatenation_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(code_block_concatenation_sptr self) -> std::string"""
        return _my_lte_swig.code_block_concatenation_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(code_block_concatenation_sptr self, std::string name)"""
        return _my_lte_swig.code_block_concatenation_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(code_block_concatenation_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.code_block_concatenation_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(code_block_concatenation_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.code_block_concatenation_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(code_block_concatenation_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.code_block_concatenation_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(code_block_concatenation_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.code_block_concatenation_sptr_message_subscribers(self, *args, **kwargs)

code_block_concatenation_sptr_swigregister = _my_lte_swig.code_block_concatenation_sptr_swigregister
code_block_concatenation_sptr_swigregister(code_block_concatenation_sptr)

code_block_concatenation_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
code_block_concatenation = code_block_concatenation.make;

LIBLTE_PHY_N_RB_DL_MAX = _my_lte_swig.LIBLTE_PHY_N_RB_DL_MAX
class resource_mapper(object):
    """Proxy of C++ gr::my_lte::resource_mapper class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(uint32 N_id_1, uint32 N_id_2, uint32 N_dl_prb) -> resource_mapper_sptr"""
        return _my_lte_swig.resource_mapper_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_resource_mapper
    __del__ = lambda self : None;
resource_mapper_swigregister = _my_lte_swig.resource_mapper_swigregister
resource_mapper_swigregister(resource_mapper)

def resource_mapper_make(*args, **kwargs):
  """resource_mapper_make(uint32 N_id_1, uint32 N_id_2, uint32 N_dl_prb) -> resource_mapper_sptr"""
  return _my_lte_swig.resource_mapper_make(*args, **kwargs)

class resource_mapper_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::resource_mapper)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::resource_mapper)> self) -> resource_mapper_sptr
        __init__(boost::shared_ptr<(gr::my_lte::resource_mapper)> self, resource_mapper p) -> resource_mapper_sptr
        """
        this = _my_lte_swig.new_resource_mapper_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(resource_mapper_sptr self) -> resource_mapper"""
        return _my_lte_swig.resource_mapper_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_resource_mapper_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(resource_mapper_sptr self, uint32 N_id_1, uint32 N_id_2, uint32 N_dl_prb) -> resource_mapper_sptr"""
        return _my_lte_swig.resource_mapper_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(resource_mapper_sptr self) -> unsigned int"""
        return _my_lte_swig.resource_mapper_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(resource_mapper_sptr self, int which, int delay)
        declare_sample_delay(resource_mapper_sptr self, unsigned int delay)
        """
        return _my_lte_swig.resource_mapper_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(resource_mapper_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.resource_mapper_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(resource_mapper_sptr self) -> int"""
        return _my_lte_swig.resource_mapper_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(resource_mapper_sptr self) -> double"""
        return _my_lte_swig.resource_mapper_sptr_relative_rate(self)

    def start(self):
        """start(resource_mapper_sptr self) -> bool"""
        return _my_lte_swig.resource_mapper_sptr_start(self)

    def stop(self):
        """stop(resource_mapper_sptr self) -> bool"""
        return _my_lte_swig.resource_mapper_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(resource_mapper_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.resource_mapper_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(resource_mapper_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.resource_mapper_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(resource_mapper_sptr self) -> int"""
        return _my_lte_swig.resource_mapper_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(resource_mapper_sptr self, int m)"""
        return _my_lte_swig.resource_mapper_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(resource_mapper_sptr self)"""
        return _my_lte_swig.resource_mapper_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(resource_mapper_sptr self) -> bool"""
        return _my_lte_swig.resource_mapper_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(resource_mapper_sptr self, int m)"""
        return _my_lte_swig.resource_mapper_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(resource_mapper_sptr self) -> int"""
        return _my_lte_swig.resource_mapper_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(resource_mapper_sptr self, int i) -> long"""
        return _my_lte_swig.resource_mapper_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(resource_mapper_sptr self, long max_output_buffer)
        set_max_output_buffer(resource_mapper_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.resource_mapper_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(resource_mapper_sptr self, int i) -> long"""
        return _my_lte_swig.resource_mapper_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(resource_mapper_sptr self, long min_output_buffer)
        set_min_output_buffer(resource_mapper_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.resource_mapper_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(resource_mapper_sptr self) -> float"""
        return _my_lte_swig.resource_mapper_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(resource_mapper_sptr self) -> float"""
        return _my_lte_swig.resource_mapper_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(resource_mapper_sptr self) -> float"""
        return _my_lte_swig.resource_mapper_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(resource_mapper_sptr self) -> float"""
        return _my_lte_swig.resource_mapper_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(resource_mapper_sptr self) -> float"""
        return _my_lte_swig.resource_mapper_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(resource_mapper_sptr self) -> float"""
        return _my_lte_swig.resource_mapper_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(resource_mapper_sptr self, int which) -> float
        pc_input_buffers_full(resource_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.resource_mapper_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(resource_mapper_sptr self, int which) -> float
        pc_input_buffers_full_avg(resource_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.resource_mapper_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(resource_mapper_sptr self, int which) -> float
        pc_input_buffers_full_var(resource_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.resource_mapper_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(resource_mapper_sptr self, int which) -> float
        pc_output_buffers_full(resource_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.resource_mapper_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(resource_mapper_sptr self, int which) -> float
        pc_output_buffers_full_avg(resource_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.resource_mapper_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(resource_mapper_sptr self, int which) -> float
        pc_output_buffers_full_var(resource_mapper_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.resource_mapper_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(resource_mapper_sptr self) -> float"""
        return _my_lte_swig.resource_mapper_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(resource_mapper_sptr self) -> float"""
        return _my_lte_swig.resource_mapper_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(resource_mapper_sptr self) -> float"""
        return _my_lte_swig.resource_mapper_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(resource_mapper_sptr self) -> float"""
        return _my_lte_swig.resource_mapper_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(resource_mapper_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.resource_mapper_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(resource_mapper_sptr self)"""
        return _my_lte_swig.resource_mapper_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(resource_mapper_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.resource_mapper_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(resource_mapper_sptr self) -> int"""
        return _my_lte_swig.resource_mapper_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(resource_mapper_sptr self) -> int"""
        return _my_lte_swig.resource_mapper_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(resource_mapper_sptr self, int priority) -> int"""
        return _my_lte_swig.resource_mapper_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(resource_mapper_sptr self) -> std::string"""
        return _my_lte_swig.resource_mapper_sptr_name(self)

    def symbol_name(self):
        """symbol_name(resource_mapper_sptr self) -> std::string"""
        return _my_lte_swig.resource_mapper_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(resource_mapper_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.resource_mapper_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(resource_mapper_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.resource_mapper_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(resource_mapper_sptr self) -> long"""
        return _my_lte_swig.resource_mapper_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(resource_mapper_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.resource_mapper_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(resource_mapper_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.resource_mapper_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(resource_mapper_sptr self) -> std::string"""
        return _my_lte_swig.resource_mapper_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(resource_mapper_sptr self, std::string name)"""
        return _my_lte_swig.resource_mapper_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(resource_mapper_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.resource_mapper_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(resource_mapper_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.resource_mapper_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(resource_mapper_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.resource_mapper_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(resource_mapper_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.resource_mapper_sptr_message_subscribers(self, *args, **kwargs)

resource_mapper_sptr_swigregister = _my_lte_swig.resource_mapper_sptr_swigregister
resource_mapper_sptr_swigregister(resource_mapper_sptr)

resource_mapper_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
resource_mapper = resource_mapper.make;

class cp_adder(object):
    """Proxy of C++ gr::my_lte::cp_adder class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(uint32 N_dl_prb, bool normal_cp) -> cp_adder_sptr"""
        return _my_lte_swig.cp_adder_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_cp_adder
    __del__ = lambda self : None;
cp_adder_swigregister = _my_lte_swig.cp_adder_swigregister
cp_adder_swigregister(cp_adder)

def cp_adder_make(*args, **kwargs):
  """cp_adder_make(uint32 N_dl_prb, bool normal_cp) -> cp_adder_sptr"""
  return _my_lte_swig.cp_adder_make(*args, **kwargs)

class cp_adder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::cp_adder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::cp_adder)> self) -> cp_adder_sptr
        __init__(boost::shared_ptr<(gr::my_lte::cp_adder)> self, cp_adder p) -> cp_adder_sptr
        """
        this = _my_lte_swig.new_cp_adder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(cp_adder_sptr self) -> cp_adder"""
        return _my_lte_swig.cp_adder_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_cp_adder_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(cp_adder_sptr self, uint32 N_dl_prb, bool normal_cp) -> cp_adder_sptr"""
        return _my_lte_swig.cp_adder_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(cp_adder_sptr self) -> unsigned int"""
        return _my_lte_swig.cp_adder_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(cp_adder_sptr self, int which, int delay)
        declare_sample_delay(cp_adder_sptr self, unsigned int delay)
        """
        return _my_lte_swig.cp_adder_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(cp_adder_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.cp_adder_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(cp_adder_sptr self) -> int"""
        return _my_lte_swig.cp_adder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(cp_adder_sptr self) -> double"""
        return _my_lte_swig.cp_adder_sptr_relative_rate(self)

    def start(self):
        """start(cp_adder_sptr self) -> bool"""
        return _my_lte_swig.cp_adder_sptr_start(self)

    def stop(self):
        """stop(cp_adder_sptr self) -> bool"""
        return _my_lte_swig.cp_adder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(cp_adder_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.cp_adder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(cp_adder_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.cp_adder_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(cp_adder_sptr self) -> int"""
        return _my_lte_swig.cp_adder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(cp_adder_sptr self, int m)"""
        return _my_lte_swig.cp_adder_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(cp_adder_sptr self)"""
        return _my_lte_swig.cp_adder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(cp_adder_sptr self) -> bool"""
        return _my_lte_swig.cp_adder_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(cp_adder_sptr self, int m)"""
        return _my_lte_swig.cp_adder_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(cp_adder_sptr self) -> int"""
        return _my_lte_swig.cp_adder_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(cp_adder_sptr self, int i) -> long"""
        return _my_lte_swig.cp_adder_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(cp_adder_sptr self, long max_output_buffer)
        set_max_output_buffer(cp_adder_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.cp_adder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(cp_adder_sptr self, int i) -> long"""
        return _my_lte_swig.cp_adder_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(cp_adder_sptr self, long min_output_buffer)
        set_min_output_buffer(cp_adder_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.cp_adder_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(cp_adder_sptr self) -> float"""
        return _my_lte_swig.cp_adder_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(cp_adder_sptr self) -> float"""
        return _my_lte_swig.cp_adder_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(cp_adder_sptr self) -> float"""
        return _my_lte_swig.cp_adder_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(cp_adder_sptr self) -> float"""
        return _my_lte_swig.cp_adder_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(cp_adder_sptr self) -> float"""
        return _my_lte_swig.cp_adder_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(cp_adder_sptr self) -> float"""
        return _my_lte_swig.cp_adder_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(cp_adder_sptr self, int which) -> float
        pc_input_buffers_full(cp_adder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.cp_adder_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(cp_adder_sptr self, int which) -> float
        pc_input_buffers_full_avg(cp_adder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.cp_adder_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(cp_adder_sptr self, int which) -> float
        pc_input_buffers_full_var(cp_adder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.cp_adder_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(cp_adder_sptr self, int which) -> float
        pc_output_buffers_full(cp_adder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.cp_adder_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(cp_adder_sptr self, int which) -> float
        pc_output_buffers_full_avg(cp_adder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.cp_adder_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(cp_adder_sptr self, int which) -> float
        pc_output_buffers_full_var(cp_adder_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.cp_adder_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(cp_adder_sptr self) -> float"""
        return _my_lte_swig.cp_adder_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(cp_adder_sptr self) -> float"""
        return _my_lte_swig.cp_adder_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(cp_adder_sptr self) -> float"""
        return _my_lte_swig.cp_adder_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(cp_adder_sptr self) -> float"""
        return _my_lte_swig.cp_adder_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(cp_adder_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.cp_adder_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(cp_adder_sptr self)"""
        return _my_lte_swig.cp_adder_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(cp_adder_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.cp_adder_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(cp_adder_sptr self) -> int"""
        return _my_lte_swig.cp_adder_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(cp_adder_sptr self) -> int"""
        return _my_lte_swig.cp_adder_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(cp_adder_sptr self, int priority) -> int"""
        return _my_lte_swig.cp_adder_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(cp_adder_sptr self) -> std::string"""
        return _my_lte_swig.cp_adder_sptr_name(self)

    def symbol_name(self):
        """symbol_name(cp_adder_sptr self) -> std::string"""
        return _my_lte_swig.cp_adder_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(cp_adder_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.cp_adder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(cp_adder_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.cp_adder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(cp_adder_sptr self) -> long"""
        return _my_lte_swig.cp_adder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(cp_adder_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.cp_adder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(cp_adder_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.cp_adder_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(cp_adder_sptr self) -> std::string"""
        return _my_lte_swig.cp_adder_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(cp_adder_sptr self, std::string name)"""
        return _my_lte_swig.cp_adder_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(cp_adder_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.cp_adder_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(cp_adder_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.cp_adder_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(cp_adder_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.cp_adder_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(cp_adder_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.cp_adder_sptr_message_subscribers(self, *args, **kwargs)

cp_adder_sptr_swigregister = _my_lte_swig.cp_adder_sptr_swigregister
cp_adder_sptr_swigregister(cp_adder_sptr)

cp_adder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cp_adder = cp_adder.make;

class pdcch_mux(object):
    """Proxy of C++ gr::my_lte::pdcch_mux class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int n_pdcch, int n_cce) -> pdcch_mux_sptr"""
        return _my_lte_swig.pdcch_mux_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_pdcch_mux
    __del__ = lambda self : None;
pdcch_mux_swigregister = _my_lte_swig.pdcch_mux_swigregister
pdcch_mux_swigregister(pdcch_mux)

def pdcch_mux_make(*args, **kwargs):
  """pdcch_mux_make(int n_pdcch, int n_cce) -> pdcch_mux_sptr"""
  return _my_lte_swig.pdcch_mux_make(*args, **kwargs)

class pdcch_mux_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::pdcch_mux)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::pdcch_mux)> self) -> pdcch_mux_sptr
        __init__(boost::shared_ptr<(gr::my_lte::pdcch_mux)> self, pdcch_mux p) -> pdcch_mux_sptr
        """
        this = _my_lte_swig.new_pdcch_mux_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pdcch_mux_sptr self) -> pdcch_mux"""
        return _my_lte_swig.pdcch_mux_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_pdcch_mux_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(pdcch_mux_sptr self, int n_pdcch, int n_cce) -> pdcch_mux_sptr"""
        return _my_lte_swig.pdcch_mux_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(pdcch_mux_sptr self) -> unsigned int"""
        return _my_lte_swig.pdcch_mux_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pdcch_mux_sptr self, int which, int delay)
        declare_sample_delay(pdcch_mux_sptr self, unsigned int delay)
        """
        return _my_lte_swig.pdcch_mux_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pdcch_mux_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.pdcch_mux_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pdcch_mux_sptr self) -> int"""
        return _my_lte_swig.pdcch_mux_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pdcch_mux_sptr self) -> double"""
        return _my_lte_swig.pdcch_mux_sptr_relative_rate(self)

    def start(self):
        """start(pdcch_mux_sptr self) -> bool"""
        return _my_lte_swig.pdcch_mux_sptr_start(self)

    def stop(self):
        """stop(pdcch_mux_sptr self) -> bool"""
        return _my_lte_swig.pdcch_mux_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pdcch_mux_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.pdcch_mux_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pdcch_mux_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.pdcch_mux_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pdcch_mux_sptr self) -> int"""
        return _my_lte_swig.pdcch_mux_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pdcch_mux_sptr self, int m)"""
        return _my_lte_swig.pdcch_mux_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pdcch_mux_sptr self)"""
        return _my_lte_swig.pdcch_mux_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pdcch_mux_sptr self) -> bool"""
        return _my_lte_swig.pdcch_mux_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pdcch_mux_sptr self, int m)"""
        return _my_lte_swig.pdcch_mux_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pdcch_mux_sptr self) -> int"""
        return _my_lte_swig.pdcch_mux_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pdcch_mux_sptr self, int i) -> long"""
        return _my_lte_swig.pdcch_mux_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pdcch_mux_sptr self, long max_output_buffer)
        set_max_output_buffer(pdcch_mux_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.pdcch_mux_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pdcch_mux_sptr self, int i) -> long"""
        return _my_lte_swig.pdcch_mux_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pdcch_mux_sptr self, long min_output_buffer)
        set_min_output_buffer(pdcch_mux_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.pdcch_mux_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pdcch_mux_sptr self) -> float"""
        return _my_lte_swig.pdcch_mux_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pdcch_mux_sptr self) -> float"""
        return _my_lte_swig.pdcch_mux_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pdcch_mux_sptr self) -> float"""
        return _my_lte_swig.pdcch_mux_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pdcch_mux_sptr self) -> float"""
        return _my_lte_swig.pdcch_mux_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pdcch_mux_sptr self) -> float"""
        return _my_lte_swig.pdcch_mux_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pdcch_mux_sptr self) -> float"""
        return _my_lte_swig.pdcch_mux_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pdcch_mux_sptr self, int which) -> float
        pc_input_buffers_full(pdcch_mux_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.pdcch_mux_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pdcch_mux_sptr self, int which) -> float
        pc_input_buffers_full_avg(pdcch_mux_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.pdcch_mux_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pdcch_mux_sptr self, int which) -> float
        pc_input_buffers_full_var(pdcch_mux_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.pdcch_mux_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pdcch_mux_sptr self, int which) -> float
        pc_output_buffers_full(pdcch_mux_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.pdcch_mux_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pdcch_mux_sptr self, int which) -> float
        pc_output_buffers_full_avg(pdcch_mux_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.pdcch_mux_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pdcch_mux_sptr self, int which) -> float
        pc_output_buffers_full_var(pdcch_mux_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.pdcch_mux_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pdcch_mux_sptr self) -> float"""
        return _my_lte_swig.pdcch_mux_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pdcch_mux_sptr self) -> float"""
        return _my_lte_swig.pdcch_mux_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pdcch_mux_sptr self) -> float"""
        return _my_lte_swig.pdcch_mux_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pdcch_mux_sptr self) -> float"""
        return _my_lte_swig.pdcch_mux_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pdcch_mux_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.pdcch_mux_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pdcch_mux_sptr self)"""
        return _my_lte_swig.pdcch_mux_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pdcch_mux_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.pdcch_mux_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pdcch_mux_sptr self) -> int"""
        return _my_lte_swig.pdcch_mux_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pdcch_mux_sptr self) -> int"""
        return _my_lte_swig.pdcch_mux_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pdcch_mux_sptr self, int priority) -> int"""
        return _my_lte_swig.pdcch_mux_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pdcch_mux_sptr self) -> std::string"""
        return _my_lte_swig.pdcch_mux_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pdcch_mux_sptr self) -> std::string"""
        return _my_lte_swig.pdcch_mux_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pdcch_mux_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.pdcch_mux_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pdcch_mux_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.pdcch_mux_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pdcch_mux_sptr self) -> long"""
        return _my_lte_swig.pdcch_mux_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pdcch_mux_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.pdcch_mux_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pdcch_mux_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.pdcch_mux_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pdcch_mux_sptr self) -> std::string"""
        return _my_lte_swig.pdcch_mux_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pdcch_mux_sptr self, std::string name)"""
        return _my_lte_swig.pdcch_mux_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pdcch_mux_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.pdcch_mux_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pdcch_mux_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.pdcch_mux_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pdcch_mux_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.pdcch_mux_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pdcch_mux_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.pdcch_mux_sptr_message_subscribers(self, *args, **kwargs)

pdcch_mux_sptr_swigregister = _my_lte_swig.pdcch_mux_sptr_swigregister
pdcch_mux_sptr_swigregister(pdcch_mux_sptr)

pdcch_mux_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pdcch_mux = pdcch_mux.make;

class dci_gen(object):
    """Proxy of C++ gr::my_lte::dci_gen class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """
        make(std::string dci_t, short rnti, bool carrier_ind, uint32 rv_idx, uint32 N_dl_prb, 
            uint32 N_layers, uint32 tx_mode, uint32 N_dl_harq, int mcs, bool ndi, int N_ant, 
            int alloc_len, int RB_start) -> dci_gen_sptr
        """
        return _my_lte_swig.dci_gen_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_dci_gen
    __del__ = lambda self : None;
dci_gen_swigregister = _my_lte_swig.dci_gen_swigregister
dci_gen_swigregister(dci_gen)

def dci_gen_make(*args, **kwargs):
  """
    dci_gen_make(std::string dci_t, short rnti, bool carrier_ind, uint32 rv_idx, uint32 N_dl_prb, 
        uint32 N_layers, uint32 tx_mode, uint32 N_dl_harq, int mcs, bool ndi, int N_ant, 
        int alloc_len, int RB_start) -> dci_gen_sptr
    """
  return _my_lte_swig.dci_gen_make(*args, **kwargs)

class dci_gen_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::dci_gen)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::dci_gen)> self) -> dci_gen_sptr
        __init__(boost::shared_ptr<(gr::my_lte::dci_gen)> self, dci_gen p) -> dci_gen_sptr
        """
        this = _my_lte_swig.new_dci_gen_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(dci_gen_sptr self) -> dci_gen"""
        return _my_lte_swig.dci_gen_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_dci_gen_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """
        make(dci_gen_sptr self, std::string dci_t, short rnti, bool carrier_ind, uint32 rv_idx, uint32 N_dl_prb, 
            uint32 N_layers, uint32 tx_mode, uint32 N_dl_harq, int mcs, bool ndi, int N_ant, 
            int alloc_len, int RB_start) -> dci_gen_sptr
        """
        return _my_lte_swig.dci_gen_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(dci_gen_sptr self) -> unsigned int"""
        return _my_lte_swig.dci_gen_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(dci_gen_sptr self, int which, int delay)
        declare_sample_delay(dci_gen_sptr self, unsigned int delay)
        """
        return _my_lte_swig.dci_gen_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(dci_gen_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.dci_gen_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(dci_gen_sptr self) -> int"""
        return _my_lte_swig.dci_gen_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(dci_gen_sptr self) -> double"""
        return _my_lte_swig.dci_gen_sptr_relative_rate(self)

    def start(self):
        """start(dci_gen_sptr self) -> bool"""
        return _my_lte_swig.dci_gen_sptr_start(self)

    def stop(self):
        """stop(dci_gen_sptr self) -> bool"""
        return _my_lte_swig.dci_gen_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(dci_gen_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.dci_gen_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(dci_gen_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.dci_gen_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(dci_gen_sptr self) -> int"""
        return _my_lte_swig.dci_gen_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(dci_gen_sptr self, int m)"""
        return _my_lte_swig.dci_gen_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(dci_gen_sptr self)"""
        return _my_lte_swig.dci_gen_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(dci_gen_sptr self) -> bool"""
        return _my_lte_swig.dci_gen_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(dci_gen_sptr self, int m)"""
        return _my_lte_swig.dci_gen_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(dci_gen_sptr self) -> int"""
        return _my_lte_swig.dci_gen_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(dci_gen_sptr self, int i) -> long"""
        return _my_lte_swig.dci_gen_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(dci_gen_sptr self, long max_output_buffer)
        set_max_output_buffer(dci_gen_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.dci_gen_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(dci_gen_sptr self, int i) -> long"""
        return _my_lte_swig.dci_gen_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(dci_gen_sptr self, long min_output_buffer)
        set_min_output_buffer(dci_gen_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.dci_gen_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(dci_gen_sptr self) -> float"""
        return _my_lte_swig.dci_gen_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(dci_gen_sptr self) -> float"""
        return _my_lte_swig.dci_gen_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(dci_gen_sptr self) -> float"""
        return _my_lte_swig.dci_gen_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(dci_gen_sptr self) -> float"""
        return _my_lte_swig.dci_gen_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(dci_gen_sptr self) -> float"""
        return _my_lte_swig.dci_gen_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(dci_gen_sptr self) -> float"""
        return _my_lte_swig.dci_gen_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(dci_gen_sptr self, int which) -> float
        pc_input_buffers_full(dci_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.dci_gen_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(dci_gen_sptr self, int which) -> float
        pc_input_buffers_full_avg(dci_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.dci_gen_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(dci_gen_sptr self, int which) -> float
        pc_input_buffers_full_var(dci_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.dci_gen_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(dci_gen_sptr self, int which) -> float
        pc_output_buffers_full(dci_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.dci_gen_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(dci_gen_sptr self, int which) -> float
        pc_output_buffers_full_avg(dci_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.dci_gen_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(dci_gen_sptr self, int which) -> float
        pc_output_buffers_full_var(dci_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.dci_gen_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(dci_gen_sptr self) -> float"""
        return _my_lte_swig.dci_gen_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(dci_gen_sptr self) -> float"""
        return _my_lte_swig.dci_gen_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(dci_gen_sptr self) -> float"""
        return _my_lte_swig.dci_gen_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(dci_gen_sptr self) -> float"""
        return _my_lte_swig.dci_gen_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(dci_gen_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.dci_gen_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(dci_gen_sptr self)"""
        return _my_lte_swig.dci_gen_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(dci_gen_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.dci_gen_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(dci_gen_sptr self) -> int"""
        return _my_lte_swig.dci_gen_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(dci_gen_sptr self) -> int"""
        return _my_lte_swig.dci_gen_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(dci_gen_sptr self, int priority) -> int"""
        return _my_lte_swig.dci_gen_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(dci_gen_sptr self) -> std::string"""
        return _my_lte_swig.dci_gen_sptr_name(self)

    def symbol_name(self):
        """symbol_name(dci_gen_sptr self) -> std::string"""
        return _my_lte_swig.dci_gen_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(dci_gen_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.dci_gen_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(dci_gen_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.dci_gen_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(dci_gen_sptr self) -> long"""
        return _my_lte_swig.dci_gen_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(dci_gen_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.dci_gen_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(dci_gen_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.dci_gen_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(dci_gen_sptr self) -> std::string"""
        return _my_lte_swig.dci_gen_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(dci_gen_sptr self, std::string name)"""
        return _my_lte_swig.dci_gen_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(dci_gen_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.dci_gen_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(dci_gen_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.dci_gen_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(dci_gen_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.dci_gen_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(dci_gen_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.dci_gen_sptr_message_subscribers(self, *args, **kwargs)

dci_gen_sptr_swigregister = _my_lte_swig.dci_gen_sptr_swigregister
dci_gen_sptr_swigregister(dci_gen_sptr)

dci_gen_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
dci_gen = dci_gen.make;

class cfi_gen(object):
    """Proxy of C++ gr::my_lte::cfi_gen class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(uint32 N_dl_prb, int cfi_val) -> cfi_gen_sptr"""
        return _my_lte_swig.cfi_gen_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_cfi_gen
    __del__ = lambda self : None;
cfi_gen_swigregister = _my_lte_swig.cfi_gen_swigregister
cfi_gen_swigregister(cfi_gen)

def cfi_gen_make(*args, **kwargs):
  """cfi_gen_make(uint32 N_dl_prb, int cfi_val) -> cfi_gen_sptr"""
  return _my_lte_swig.cfi_gen_make(*args, **kwargs)

class cfi_gen_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::cfi_gen)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::cfi_gen)> self) -> cfi_gen_sptr
        __init__(boost::shared_ptr<(gr::my_lte::cfi_gen)> self, cfi_gen p) -> cfi_gen_sptr
        """
        this = _my_lte_swig.new_cfi_gen_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(cfi_gen_sptr self) -> cfi_gen"""
        return _my_lte_swig.cfi_gen_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_cfi_gen_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(cfi_gen_sptr self, uint32 N_dl_prb, int cfi_val) -> cfi_gen_sptr"""
        return _my_lte_swig.cfi_gen_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(cfi_gen_sptr self) -> unsigned int"""
        return _my_lte_swig.cfi_gen_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(cfi_gen_sptr self, int which, int delay)
        declare_sample_delay(cfi_gen_sptr self, unsigned int delay)
        """
        return _my_lte_swig.cfi_gen_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(cfi_gen_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.cfi_gen_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(cfi_gen_sptr self) -> int"""
        return _my_lte_swig.cfi_gen_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(cfi_gen_sptr self) -> double"""
        return _my_lte_swig.cfi_gen_sptr_relative_rate(self)

    def start(self):
        """start(cfi_gen_sptr self) -> bool"""
        return _my_lte_swig.cfi_gen_sptr_start(self)

    def stop(self):
        """stop(cfi_gen_sptr self) -> bool"""
        return _my_lte_swig.cfi_gen_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(cfi_gen_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.cfi_gen_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(cfi_gen_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.cfi_gen_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(cfi_gen_sptr self) -> int"""
        return _my_lte_swig.cfi_gen_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(cfi_gen_sptr self, int m)"""
        return _my_lte_swig.cfi_gen_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(cfi_gen_sptr self)"""
        return _my_lte_swig.cfi_gen_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(cfi_gen_sptr self) -> bool"""
        return _my_lte_swig.cfi_gen_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(cfi_gen_sptr self, int m)"""
        return _my_lte_swig.cfi_gen_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(cfi_gen_sptr self) -> int"""
        return _my_lte_swig.cfi_gen_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(cfi_gen_sptr self, int i) -> long"""
        return _my_lte_swig.cfi_gen_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(cfi_gen_sptr self, long max_output_buffer)
        set_max_output_buffer(cfi_gen_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.cfi_gen_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(cfi_gen_sptr self, int i) -> long"""
        return _my_lte_swig.cfi_gen_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(cfi_gen_sptr self, long min_output_buffer)
        set_min_output_buffer(cfi_gen_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.cfi_gen_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(cfi_gen_sptr self) -> float"""
        return _my_lte_swig.cfi_gen_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(cfi_gen_sptr self) -> float"""
        return _my_lte_swig.cfi_gen_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(cfi_gen_sptr self) -> float"""
        return _my_lte_swig.cfi_gen_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(cfi_gen_sptr self) -> float"""
        return _my_lte_swig.cfi_gen_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(cfi_gen_sptr self) -> float"""
        return _my_lte_swig.cfi_gen_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(cfi_gen_sptr self) -> float"""
        return _my_lte_swig.cfi_gen_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(cfi_gen_sptr self, int which) -> float
        pc_input_buffers_full(cfi_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.cfi_gen_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(cfi_gen_sptr self, int which) -> float
        pc_input_buffers_full_avg(cfi_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.cfi_gen_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(cfi_gen_sptr self, int which) -> float
        pc_input_buffers_full_var(cfi_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.cfi_gen_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(cfi_gen_sptr self, int which) -> float
        pc_output_buffers_full(cfi_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.cfi_gen_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(cfi_gen_sptr self, int which) -> float
        pc_output_buffers_full_avg(cfi_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.cfi_gen_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(cfi_gen_sptr self, int which) -> float
        pc_output_buffers_full_var(cfi_gen_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.cfi_gen_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(cfi_gen_sptr self) -> float"""
        return _my_lte_swig.cfi_gen_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(cfi_gen_sptr self) -> float"""
        return _my_lte_swig.cfi_gen_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(cfi_gen_sptr self) -> float"""
        return _my_lte_swig.cfi_gen_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(cfi_gen_sptr self) -> float"""
        return _my_lte_swig.cfi_gen_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(cfi_gen_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.cfi_gen_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(cfi_gen_sptr self)"""
        return _my_lte_swig.cfi_gen_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(cfi_gen_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.cfi_gen_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(cfi_gen_sptr self) -> int"""
        return _my_lte_swig.cfi_gen_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(cfi_gen_sptr self) -> int"""
        return _my_lte_swig.cfi_gen_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(cfi_gen_sptr self, int priority) -> int"""
        return _my_lte_swig.cfi_gen_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(cfi_gen_sptr self) -> std::string"""
        return _my_lte_swig.cfi_gen_sptr_name(self)

    def symbol_name(self):
        """symbol_name(cfi_gen_sptr self) -> std::string"""
        return _my_lte_swig.cfi_gen_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(cfi_gen_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.cfi_gen_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(cfi_gen_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.cfi_gen_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(cfi_gen_sptr self) -> long"""
        return _my_lte_swig.cfi_gen_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(cfi_gen_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.cfi_gen_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(cfi_gen_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.cfi_gen_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(cfi_gen_sptr self) -> std::string"""
        return _my_lte_swig.cfi_gen_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(cfi_gen_sptr self, std::string name)"""
        return _my_lte_swig.cfi_gen_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(cfi_gen_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.cfi_gen_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(cfi_gen_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.cfi_gen_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(cfi_gen_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.cfi_gen_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(cfi_gen_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.cfi_gen_sptr_message_subscribers(self, *args, **kwargs)

cfi_gen_sptr_swigregister = _my_lte_swig.cfi_gen_sptr_swigregister
cfi_gen_sptr_swigregister(cfi_gen_sptr)

cfi_gen_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
cfi_gen = cfi_gen.make;

class phich_orthogonalization(object):
    """Proxy of C++ gr::my_lte::phich_orthogonalization class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(bool normal_cp, int N_PHICH_seq) -> phich_orthogonalization_sptr"""
        return _my_lte_swig.phich_orthogonalization_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_phich_orthogonalization
    __del__ = lambda self : None;
phich_orthogonalization_swigregister = _my_lte_swig.phich_orthogonalization_swigregister
phich_orthogonalization_swigregister(phich_orthogonalization)

def phich_orthogonalization_make(*args, **kwargs):
  """phich_orthogonalization_make(bool normal_cp, int N_PHICH_seq) -> phich_orthogonalization_sptr"""
  return _my_lte_swig.phich_orthogonalization_make(*args, **kwargs)

class phich_orthogonalization_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::phich_orthogonalization)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::phich_orthogonalization)> self) -> phich_orthogonalization_sptr
        __init__(boost::shared_ptr<(gr::my_lte::phich_orthogonalization)> self, phich_orthogonalization p) -> phich_orthogonalization_sptr
        """
        this = _my_lte_swig.new_phich_orthogonalization_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(phich_orthogonalization_sptr self) -> phich_orthogonalization"""
        return _my_lte_swig.phich_orthogonalization_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_phich_orthogonalization_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(phich_orthogonalization_sptr self, bool normal_cp, int N_PHICH_seq) -> phich_orthogonalization_sptr"""
        return _my_lte_swig.phich_orthogonalization_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(phich_orthogonalization_sptr self) -> unsigned int"""
        return _my_lte_swig.phich_orthogonalization_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(phich_orthogonalization_sptr self, int which, int delay)
        declare_sample_delay(phich_orthogonalization_sptr self, unsigned int delay)
        """
        return _my_lte_swig.phich_orthogonalization_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(phich_orthogonalization_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.phich_orthogonalization_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(phich_orthogonalization_sptr self) -> int"""
        return _my_lte_swig.phich_orthogonalization_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(phich_orthogonalization_sptr self) -> double"""
        return _my_lte_swig.phich_orthogonalization_sptr_relative_rate(self)

    def start(self):
        """start(phich_orthogonalization_sptr self) -> bool"""
        return _my_lte_swig.phich_orthogonalization_sptr_start(self)

    def stop(self):
        """stop(phich_orthogonalization_sptr self) -> bool"""
        return _my_lte_swig.phich_orthogonalization_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(phich_orthogonalization_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.phich_orthogonalization_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(phich_orthogonalization_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.phich_orthogonalization_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(phich_orthogonalization_sptr self) -> int"""
        return _my_lte_swig.phich_orthogonalization_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(phich_orthogonalization_sptr self, int m)"""
        return _my_lte_swig.phich_orthogonalization_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(phich_orthogonalization_sptr self)"""
        return _my_lte_swig.phich_orthogonalization_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(phich_orthogonalization_sptr self) -> bool"""
        return _my_lte_swig.phich_orthogonalization_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(phich_orthogonalization_sptr self, int m)"""
        return _my_lte_swig.phich_orthogonalization_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(phich_orthogonalization_sptr self) -> int"""
        return _my_lte_swig.phich_orthogonalization_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(phich_orthogonalization_sptr self, int i) -> long"""
        return _my_lte_swig.phich_orthogonalization_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(phich_orthogonalization_sptr self, long max_output_buffer)
        set_max_output_buffer(phich_orthogonalization_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.phich_orthogonalization_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(phich_orthogonalization_sptr self, int i) -> long"""
        return _my_lte_swig.phich_orthogonalization_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(phich_orthogonalization_sptr self, long min_output_buffer)
        set_min_output_buffer(phich_orthogonalization_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.phich_orthogonalization_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(phich_orthogonalization_sptr self) -> float"""
        return _my_lte_swig.phich_orthogonalization_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(phich_orthogonalization_sptr self) -> float"""
        return _my_lte_swig.phich_orthogonalization_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(phich_orthogonalization_sptr self) -> float"""
        return _my_lte_swig.phich_orthogonalization_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(phich_orthogonalization_sptr self) -> float"""
        return _my_lte_swig.phich_orthogonalization_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(phich_orthogonalization_sptr self) -> float"""
        return _my_lte_swig.phich_orthogonalization_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(phich_orthogonalization_sptr self) -> float"""
        return _my_lte_swig.phich_orthogonalization_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(phich_orthogonalization_sptr self, int which) -> float
        pc_input_buffers_full(phich_orthogonalization_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_orthogonalization_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(phich_orthogonalization_sptr self, int which) -> float
        pc_input_buffers_full_avg(phich_orthogonalization_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_orthogonalization_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(phich_orthogonalization_sptr self, int which) -> float
        pc_input_buffers_full_var(phich_orthogonalization_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_orthogonalization_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(phich_orthogonalization_sptr self, int which) -> float
        pc_output_buffers_full(phich_orthogonalization_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_orthogonalization_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(phich_orthogonalization_sptr self, int which) -> float
        pc_output_buffers_full_avg(phich_orthogonalization_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_orthogonalization_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(phich_orthogonalization_sptr self, int which) -> float
        pc_output_buffers_full_var(phich_orthogonalization_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_orthogonalization_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(phich_orthogonalization_sptr self) -> float"""
        return _my_lte_swig.phich_orthogonalization_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(phich_orthogonalization_sptr self) -> float"""
        return _my_lte_swig.phich_orthogonalization_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(phich_orthogonalization_sptr self) -> float"""
        return _my_lte_swig.phich_orthogonalization_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(phich_orthogonalization_sptr self) -> float"""
        return _my_lte_swig.phich_orthogonalization_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(phich_orthogonalization_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.phich_orthogonalization_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(phich_orthogonalization_sptr self)"""
        return _my_lte_swig.phich_orthogonalization_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(phich_orthogonalization_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.phich_orthogonalization_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(phich_orthogonalization_sptr self) -> int"""
        return _my_lte_swig.phich_orthogonalization_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(phich_orthogonalization_sptr self) -> int"""
        return _my_lte_swig.phich_orthogonalization_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(phich_orthogonalization_sptr self, int priority) -> int"""
        return _my_lte_swig.phich_orthogonalization_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(phich_orthogonalization_sptr self) -> std::string"""
        return _my_lte_swig.phich_orthogonalization_sptr_name(self)

    def symbol_name(self):
        """symbol_name(phich_orthogonalization_sptr self) -> std::string"""
        return _my_lte_swig.phich_orthogonalization_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(phich_orthogonalization_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.phich_orthogonalization_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(phich_orthogonalization_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.phich_orthogonalization_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(phich_orthogonalization_sptr self) -> long"""
        return _my_lte_swig.phich_orthogonalization_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(phich_orthogonalization_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.phich_orthogonalization_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(phich_orthogonalization_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.phich_orthogonalization_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(phich_orthogonalization_sptr self) -> std::string"""
        return _my_lte_swig.phich_orthogonalization_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(phich_orthogonalization_sptr self, std::string name)"""
        return _my_lte_swig.phich_orthogonalization_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(phich_orthogonalization_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.phich_orthogonalization_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(phich_orthogonalization_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.phich_orthogonalization_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(phich_orthogonalization_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.phich_orthogonalization_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(phich_orthogonalization_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.phich_orthogonalization_sptr_message_subscribers(self, *args, **kwargs)

phich_orthogonalization_sptr_swigregister = _my_lte_swig.phich_orthogonalization_sptr_swigregister
phich_orthogonalization_sptr_swigregister(phich_orthogonalization_sptr)

phich_orthogonalization_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
phich_orthogonalization = phich_orthogonalization.make;

class repeater(object):
    """Proxy of C++ gr::my_lte::repeater class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int n) -> repeater_sptr"""
        return _my_lte_swig.repeater_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_repeater
    __del__ = lambda self : None;
repeater_swigregister = _my_lte_swig.repeater_swigregister
repeater_swigregister(repeater)

def repeater_make(*args, **kwargs):
  """repeater_make(int n) -> repeater_sptr"""
  return _my_lte_swig.repeater_make(*args, **kwargs)

class repeater_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::repeater)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::repeater)> self) -> repeater_sptr
        __init__(boost::shared_ptr<(gr::my_lte::repeater)> self, repeater p) -> repeater_sptr
        """
        this = _my_lte_swig.new_repeater_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(repeater_sptr self) -> repeater"""
        return _my_lte_swig.repeater_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_repeater_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(repeater_sptr self, int n) -> repeater_sptr"""
        return _my_lte_swig.repeater_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(repeater_sptr self) -> unsigned int"""
        return _my_lte_swig.repeater_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(repeater_sptr self, int which, int delay)
        declare_sample_delay(repeater_sptr self, unsigned int delay)
        """
        return _my_lte_swig.repeater_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(repeater_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.repeater_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(repeater_sptr self) -> int"""
        return _my_lte_swig.repeater_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(repeater_sptr self) -> double"""
        return _my_lte_swig.repeater_sptr_relative_rate(self)

    def start(self):
        """start(repeater_sptr self) -> bool"""
        return _my_lte_swig.repeater_sptr_start(self)

    def stop(self):
        """stop(repeater_sptr self) -> bool"""
        return _my_lte_swig.repeater_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(repeater_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.repeater_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(repeater_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.repeater_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(repeater_sptr self) -> int"""
        return _my_lte_swig.repeater_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(repeater_sptr self, int m)"""
        return _my_lte_swig.repeater_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(repeater_sptr self)"""
        return _my_lte_swig.repeater_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(repeater_sptr self) -> bool"""
        return _my_lte_swig.repeater_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(repeater_sptr self, int m)"""
        return _my_lte_swig.repeater_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(repeater_sptr self) -> int"""
        return _my_lte_swig.repeater_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(repeater_sptr self, int i) -> long"""
        return _my_lte_swig.repeater_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(repeater_sptr self, long max_output_buffer)
        set_max_output_buffer(repeater_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.repeater_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(repeater_sptr self, int i) -> long"""
        return _my_lte_swig.repeater_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(repeater_sptr self, long min_output_buffer)
        set_min_output_buffer(repeater_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.repeater_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(repeater_sptr self) -> float"""
        return _my_lte_swig.repeater_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(repeater_sptr self) -> float"""
        return _my_lte_swig.repeater_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(repeater_sptr self) -> float"""
        return _my_lte_swig.repeater_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(repeater_sptr self) -> float"""
        return _my_lte_swig.repeater_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(repeater_sptr self) -> float"""
        return _my_lte_swig.repeater_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(repeater_sptr self) -> float"""
        return _my_lte_swig.repeater_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(repeater_sptr self, int which) -> float
        pc_input_buffers_full(repeater_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.repeater_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(repeater_sptr self, int which) -> float
        pc_input_buffers_full_avg(repeater_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.repeater_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(repeater_sptr self, int which) -> float
        pc_input_buffers_full_var(repeater_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.repeater_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(repeater_sptr self, int which) -> float
        pc_output_buffers_full(repeater_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.repeater_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(repeater_sptr self, int which) -> float
        pc_output_buffers_full_avg(repeater_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.repeater_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(repeater_sptr self, int which) -> float
        pc_output_buffers_full_var(repeater_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.repeater_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(repeater_sptr self) -> float"""
        return _my_lte_swig.repeater_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(repeater_sptr self) -> float"""
        return _my_lte_swig.repeater_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(repeater_sptr self) -> float"""
        return _my_lte_swig.repeater_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(repeater_sptr self) -> float"""
        return _my_lte_swig.repeater_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(repeater_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.repeater_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(repeater_sptr self)"""
        return _my_lte_swig.repeater_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(repeater_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.repeater_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(repeater_sptr self) -> int"""
        return _my_lte_swig.repeater_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(repeater_sptr self) -> int"""
        return _my_lte_swig.repeater_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(repeater_sptr self, int priority) -> int"""
        return _my_lte_swig.repeater_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(repeater_sptr self) -> std::string"""
        return _my_lte_swig.repeater_sptr_name(self)

    def symbol_name(self):
        """symbol_name(repeater_sptr self) -> std::string"""
        return _my_lte_swig.repeater_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(repeater_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.repeater_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(repeater_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.repeater_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(repeater_sptr self) -> long"""
        return _my_lte_swig.repeater_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(repeater_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.repeater_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(repeater_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.repeater_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(repeater_sptr self) -> std::string"""
        return _my_lte_swig.repeater_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(repeater_sptr self, std::string name)"""
        return _my_lte_swig.repeater_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(repeater_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.repeater_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(repeater_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.repeater_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(repeater_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.repeater_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(repeater_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.repeater_sptr_message_subscribers(self, *args, **kwargs)

repeater_sptr_swigregister = _my_lte_swig.repeater_sptr_swigregister
repeater_sptr_swigregister(repeater_sptr)

repeater_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
repeater = repeater.make;

class phich_alignment(object):
    """Proxy of C++ gr::my_lte::phich_alignment class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(bool normal_cp, int n_phich_group) -> phich_alignment_sptr"""
        return _my_lte_swig.phich_alignment_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_phich_alignment
    __del__ = lambda self : None;
phich_alignment_swigregister = _my_lte_swig.phich_alignment_swigregister
phich_alignment_swigregister(phich_alignment)

def phich_alignment_make(*args, **kwargs):
  """phich_alignment_make(bool normal_cp, int n_phich_group) -> phich_alignment_sptr"""
  return _my_lte_swig.phich_alignment_make(*args, **kwargs)

class phich_alignment_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::phich_alignment)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::phich_alignment)> self) -> phich_alignment_sptr
        __init__(boost::shared_ptr<(gr::my_lte::phich_alignment)> self, phich_alignment p) -> phich_alignment_sptr
        """
        this = _my_lte_swig.new_phich_alignment_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(phich_alignment_sptr self) -> phich_alignment"""
        return _my_lte_swig.phich_alignment_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_phich_alignment_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(phich_alignment_sptr self, bool normal_cp, int n_phich_group) -> phich_alignment_sptr"""
        return _my_lte_swig.phich_alignment_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(phich_alignment_sptr self) -> unsigned int"""
        return _my_lte_swig.phich_alignment_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(phich_alignment_sptr self, int which, int delay)
        declare_sample_delay(phich_alignment_sptr self, unsigned int delay)
        """
        return _my_lte_swig.phich_alignment_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(phich_alignment_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.phich_alignment_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(phich_alignment_sptr self) -> int"""
        return _my_lte_swig.phich_alignment_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(phich_alignment_sptr self) -> double"""
        return _my_lte_swig.phich_alignment_sptr_relative_rate(self)

    def start(self):
        """start(phich_alignment_sptr self) -> bool"""
        return _my_lte_swig.phich_alignment_sptr_start(self)

    def stop(self):
        """stop(phich_alignment_sptr self) -> bool"""
        return _my_lte_swig.phich_alignment_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(phich_alignment_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.phich_alignment_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(phich_alignment_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.phich_alignment_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(phich_alignment_sptr self) -> int"""
        return _my_lte_swig.phich_alignment_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(phich_alignment_sptr self, int m)"""
        return _my_lte_swig.phich_alignment_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(phich_alignment_sptr self)"""
        return _my_lte_swig.phich_alignment_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(phich_alignment_sptr self) -> bool"""
        return _my_lte_swig.phich_alignment_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(phich_alignment_sptr self, int m)"""
        return _my_lte_swig.phich_alignment_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(phich_alignment_sptr self) -> int"""
        return _my_lte_swig.phich_alignment_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(phich_alignment_sptr self, int i) -> long"""
        return _my_lte_swig.phich_alignment_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(phich_alignment_sptr self, long max_output_buffer)
        set_max_output_buffer(phich_alignment_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.phich_alignment_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(phich_alignment_sptr self, int i) -> long"""
        return _my_lte_swig.phich_alignment_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(phich_alignment_sptr self, long min_output_buffer)
        set_min_output_buffer(phich_alignment_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.phich_alignment_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(phich_alignment_sptr self) -> float"""
        return _my_lte_swig.phich_alignment_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(phich_alignment_sptr self) -> float"""
        return _my_lte_swig.phich_alignment_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(phich_alignment_sptr self) -> float"""
        return _my_lte_swig.phich_alignment_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(phich_alignment_sptr self) -> float"""
        return _my_lte_swig.phich_alignment_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(phich_alignment_sptr self) -> float"""
        return _my_lte_swig.phich_alignment_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(phich_alignment_sptr self) -> float"""
        return _my_lte_swig.phich_alignment_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(phich_alignment_sptr self, int which) -> float
        pc_input_buffers_full(phich_alignment_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_alignment_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(phich_alignment_sptr self, int which) -> float
        pc_input_buffers_full_avg(phich_alignment_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_alignment_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(phich_alignment_sptr self, int which) -> float
        pc_input_buffers_full_var(phich_alignment_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_alignment_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(phich_alignment_sptr self, int which) -> float
        pc_output_buffers_full(phich_alignment_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_alignment_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(phich_alignment_sptr self, int which) -> float
        pc_output_buffers_full_avg(phich_alignment_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_alignment_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(phich_alignment_sptr self, int which) -> float
        pc_output_buffers_full_var(phich_alignment_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_alignment_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(phich_alignment_sptr self) -> float"""
        return _my_lte_swig.phich_alignment_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(phich_alignment_sptr self) -> float"""
        return _my_lte_swig.phich_alignment_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(phich_alignment_sptr self) -> float"""
        return _my_lte_swig.phich_alignment_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(phich_alignment_sptr self) -> float"""
        return _my_lte_swig.phich_alignment_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(phich_alignment_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.phich_alignment_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(phich_alignment_sptr self)"""
        return _my_lte_swig.phich_alignment_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(phich_alignment_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.phich_alignment_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(phich_alignment_sptr self) -> int"""
        return _my_lte_swig.phich_alignment_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(phich_alignment_sptr self) -> int"""
        return _my_lte_swig.phich_alignment_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(phich_alignment_sptr self, int priority) -> int"""
        return _my_lte_swig.phich_alignment_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(phich_alignment_sptr self) -> std::string"""
        return _my_lte_swig.phich_alignment_sptr_name(self)

    def symbol_name(self):
        """symbol_name(phich_alignment_sptr self) -> std::string"""
        return _my_lte_swig.phich_alignment_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(phich_alignment_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.phich_alignment_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(phich_alignment_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.phich_alignment_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(phich_alignment_sptr self) -> long"""
        return _my_lte_swig.phich_alignment_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(phich_alignment_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.phich_alignment_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(phich_alignment_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.phich_alignment_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(phich_alignment_sptr self) -> std::string"""
        return _my_lte_swig.phich_alignment_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(phich_alignment_sptr self, std::string name)"""
        return _my_lte_swig.phich_alignment_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(phich_alignment_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.phich_alignment_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(phich_alignment_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.phich_alignment_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(phich_alignment_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.phich_alignment_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(phich_alignment_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.phich_alignment_sptr_message_subscribers(self, *args, **kwargs)

phich_alignment_sptr_swigregister = _my_lte_swig.phich_alignment_sptr_swigregister
phich_alignment_sptr_swigregister(phich_alignment_sptr)

phich_alignment_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
phich_alignment = phich_alignment.make;

class phich_grouping(object):
    """Proxy of C++ gr::my_lte::phich_grouping class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(bool normal_cp, int n_phich_group) -> phich_grouping_sptr"""
        return _my_lte_swig.phich_grouping_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_phich_grouping
    __del__ = lambda self : None;
phich_grouping_swigregister = _my_lte_swig.phich_grouping_swigregister
phich_grouping_swigregister(phich_grouping)

def phich_grouping_make(*args, **kwargs):
  """phich_grouping_make(bool normal_cp, int n_phich_group) -> phich_grouping_sptr"""
  return _my_lte_swig.phich_grouping_make(*args, **kwargs)

class phich_grouping_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::phich_grouping)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::phich_grouping)> self) -> phich_grouping_sptr
        __init__(boost::shared_ptr<(gr::my_lte::phich_grouping)> self, phich_grouping p) -> phich_grouping_sptr
        """
        this = _my_lte_swig.new_phich_grouping_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(phich_grouping_sptr self) -> phich_grouping"""
        return _my_lte_swig.phich_grouping_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_phich_grouping_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(phich_grouping_sptr self, bool normal_cp, int n_phich_group) -> phich_grouping_sptr"""
        return _my_lte_swig.phich_grouping_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(phich_grouping_sptr self) -> unsigned int"""
        return _my_lte_swig.phich_grouping_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(phich_grouping_sptr self, int which, int delay)
        declare_sample_delay(phich_grouping_sptr self, unsigned int delay)
        """
        return _my_lte_swig.phich_grouping_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(phich_grouping_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.phich_grouping_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(phich_grouping_sptr self) -> int"""
        return _my_lte_swig.phich_grouping_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(phich_grouping_sptr self) -> double"""
        return _my_lte_swig.phich_grouping_sptr_relative_rate(self)

    def start(self):
        """start(phich_grouping_sptr self) -> bool"""
        return _my_lte_swig.phich_grouping_sptr_start(self)

    def stop(self):
        """stop(phich_grouping_sptr self) -> bool"""
        return _my_lte_swig.phich_grouping_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(phich_grouping_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.phich_grouping_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(phich_grouping_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.phich_grouping_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(phich_grouping_sptr self) -> int"""
        return _my_lte_swig.phich_grouping_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(phich_grouping_sptr self, int m)"""
        return _my_lte_swig.phich_grouping_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(phich_grouping_sptr self)"""
        return _my_lte_swig.phich_grouping_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(phich_grouping_sptr self) -> bool"""
        return _my_lte_swig.phich_grouping_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(phich_grouping_sptr self, int m)"""
        return _my_lte_swig.phich_grouping_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(phich_grouping_sptr self) -> int"""
        return _my_lte_swig.phich_grouping_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(phich_grouping_sptr self, int i) -> long"""
        return _my_lte_swig.phich_grouping_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(phich_grouping_sptr self, long max_output_buffer)
        set_max_output_buffer(phich_grouping_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.phich_grouping_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(phich_grouping_sptr self, int i) -> long"""
        return _my_lte_swig.phich_grouping_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(phich_grouping_sptr self, long min_output_buffer)
        set_min_output_buffer(phich_grouping_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.phich_grouping_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(phich_grouping_sptr self) -> float"""
        return _my_lte_swig.phich_grouping_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(phich_grouping_sptr self) -> float"""
        return _my_lte_swig.phich_grouping_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(phich_grouping_sptr self) -> float"""
        return _my_lte_swig.phich_grouping_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(phich_grouping_sptr self) -> float"""
        return _my_lte_swig.phich_grouping_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(phich_grouping_sptr self) -> float"""
        return _my_lte_swig.phich_grouping_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(phich_grouping_sptr self) -> float"""
        return _my_lte_swig.phich_grouping_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(phich_grouping_sptr self, int which) -> float
        pc_input_buffers_full(phich_grouping_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_grouping_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(phich_grouping_sptr self, int which) -> float
        pc_input_buffers_full_avg(phich_grouping_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_grouping_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(phich_grouping_sptr self, int which) -> float
        pc_input_buffers_full_var(phich_grouping_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_grouping_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(phich_grouping_sptr self, int which) -> float
        pc_output_buffers_full(phich_grouping_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_grouping_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(phich_grouping_sptr self, int which) -> float
        pc_output_buffers_full_avg(phich_grouping_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_grouping_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(phich_grouping_sptr self, int which) -> float
        pc_output_buffers_full_var(phich_grouping_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.phich_grouping_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(phich_grouping_sptr self) -> float"""
        return _my_lte_swig.phich_grouping_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(phich_grouping_sptr self) -> float"""
        return _my_lte_swig.phich_grouping_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(phich_grouping_sptr self) -> float"""
        return _my_lte_swig.phich_grouping_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(phich_grouping_sptr self) -> float"""
        return _my_lte_swig.phich_grouping_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(phich_grouping_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.phich_grouping_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(phich_grouping_sptr self)"""
        return _my_lte_swig.phich_grouping_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(phich_grouping_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.phich_grouping_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(phich_grouping_sptr self) -> int"""
        return _my_lte_swig.phich_grouping_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(phich_grouping_sptr self) -> int"""
        return _my_lte_swig.phich_grouping_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(phich_grouping_sptr self, int priority) -> int"""
        return _my_lte_swig.phich_grouping_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(phich_grouping_sptr self) -> std::string"""
        return _my_lte_swig.phich_grouping_sptr_name(self)

    def symbol_name(self):
        """symbol_name(phich_grouping_sptr self) -> std::string"""
        return _my_lte_swig.phich_grouping_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(phich_grouping_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.phich_grouping_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(phich_grouping_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.phich_grouping_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(phich_grouping_sptr self) -> long"""
        return _my_lte_swig.phich_grouping_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(phich_grouping_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.phich_grouping_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(phich_grouping_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.phich_grouping_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(phich_grouping_sptr self) -> std::string"""
        return _my_lte_swig.phich_grouping_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(phich_grouping_sptr self, std::string name)"""
        return _my_lte_swig.phich_grouping_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(phich_grouping_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.phich_grouping_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(phich_grouping_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.phich_grouping_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(phich_grouping_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.phich_grouping_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(phich_grouping_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.phich_grouping_sptr_message_subscribers(self, *args, **kwargs)

phich_grouping_sptr_swigregister = _my_lte_swig.phich_grouping_sptr_swigregister
phich_grouping_sptr_swigregister(phich_grouping_sptr)

phich_grouping_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
phich_grouping = phich_grouping.make;

class pdcch_interleaver(object):
    """Proxy of C++ gr::my_lte::pdcch_interleaver class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(int N_ant, int N_cell_id) -> pdcch_interleaver_sptr"""
        return _my_lte_swig.pdcch_interleaver_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_pdcch_interleaver
    __del__ = lambda self : None;
pdcch_interleaver_swigregister = _my_lte_swig.pdcch_interleaver_swigregister
pdcch_interleaver_swigregister(pdcch_interleaver)

def pdcch_interleaver_make(*args, **kwargs):
  """pdcch_interleaver_make(int N_ant, int N_cell_id) -> pdcch_interleaver_sptr"""
  return _my_lte_swig.pdcch_interleaver_make(*args, **kwargs)

class pdcch_interleaver_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::pdcch_interleaver)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::pdcch_interleaver)> self) -> pdcch_interleaver_sptr
        __init__(boost::shared_ptr<(gr::my_lte::pdcch_interleaver)> self, pdcch_interleaver p) -> pdcch_interleaver_sptr
        """
        this = _my_lte_swig.new_pdcch_interleaver_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pdcch_interleaver_sptr self) -> pdcch_interleaver"""
        return _my_lte_swig.pdcch_interleaver_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_pdcch_interleaver_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(pdcch_interleaver_sptr self, int N_ant, int N_cell_id) -> pdcch_interleaver_sptr"""
        return _my_lte_swig.pdcch_interleaver_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(pdcch_interleaver_sptr self) -> unsigned int"""
        return _my_lte_swig.pdcch_interleaver_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pdcch_interleaver_sptr self, int which, int delay)
        declare_sample_delay(pdcch_interleaver_sptr self, unsigned int delay)
        """
        return _my_lte_swig.pdcch_interleaver_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pdcch_interleaver_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.pdcch_interleaver_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pdcch_interleaver_sptr self) -> int"""
        return _my_lte_swig.pdcch_interleaver_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pdcch_interleaver_sptr self) -> double"""
        return _my_lte_swig.pdcch_interleaver_sptr_relative_rate(self)

    def start(self):
        """start(pdcch_interleaver_sptr self) -> bool"""
        return _my_lte_swig.pdcch_interleaver_sptr_start(self)

    def stop(self):
        """stop(pdcch_interleaver_sptr self) -> bool"""
        return _my_lte_swig.pdcch_interleaver_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pdcch_interleaver_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.pdcch_interleaver_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pdcch_interleaver_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.pdcch_interleaver_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pdcch_interleaver_sptr self) -> int"""
        return _my_lte_swig.pdcch_interleaver_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pdcch_interleaver_sptr self, int m)"""
        return _my_lte_swig.pdcch_interleaver_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pdcch_interleaver_sptr self)"""
        return _my_lte_swig.pdcch_interleaver_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pdcch_interleaver_sptr self) -> bool"""
        return _my_lte_swig.pdcch_interleaver_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pdcch_interleaver_sptr self, int m)"""
        return _my_lte_swig.pdcch_interleaver_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pdcch_interleaver_sptr self) -> int"""
        return _my_lte_swig.pdcch_interleaver_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pdcch_interleaver_sptr self, int i) -> long"""
        return _my_lte_swig.pdcch_interleaver_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pdcch_interleaver_sptr self, long max_output_buffer)
        set_max_output_buffer(pdcch_interleaver_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.pdcch_interleaver_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pdcch_interleaver_sptr self, int i) -> long"""
        return _my_lte_swig.pdcch_interleaver_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pdcch_interleaver_sptr self, long min_output_buffer)
        set_min_output_buffer(pdcch_interleaver_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.pdcch_interleaver_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pdcch_interleaver_sptr self) -> float"""
        return _my_lte_swig.pdcch_interleaver_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pdcch_interleaver_sptr self) -> float"""
        return _my_lte_swig.pdcch_interleaver_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pdcch_interleaver_sptr self) -> float"""
        return _my_lte_swig.pdcch_interleaver_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pdcch_interleaver_sptr self) -> float"""
        return _my_lte_swig.pdcch_interleaver_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pdcch_interleaver_sptr self) -> float"""
        return _my_lte_swig.pdcch_interleaver_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pdcch_interleaver_sptr self) -> float"""
        return _my_lte_swig.pdcch_interleaver_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pdcch_interleaver_sptr self, int which) -> float
        pc_input_buffers_full(pdcch_interleaver_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.pdcch_interleaver_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pdcch_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_avg(pdcch_interleaver_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.pdcch_interleaver_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pdcch_interleaver_sptr self, int which) -> float
        pc_input_buffers_full_var(pdcch_interleaver_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.pdcch_interleaver_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pdcch_interleaver_sptr self, int which) -> float
        pc_output_buffers_full(pdcch_interleaver_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.pdcch_interleaver_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pdcch_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_avg(pdcch_interleaver_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.pdcch_interleaver_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pdcch_interleaver_sptr self, int which) -> float
        pc_output_buffers_full_var(pdcch_interleaver_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.pdcch_interleaver_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pdcch_interleaver_sptr self) -> float"""
        return _my_lte_swig.pdcch_interleaver_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pdcch_interleaver_sptr self) -> float"""
        return _my_lte_swig.pdcch_interleaver_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pdcch_interleaver_sptr self) -> float"""
        return _my_lte_swig.pdcch_interleaver_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pdcch_interleaver_sptr self) -> float"""
        return _my_lte_swig.pdcch_interleaver_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pdcch_interleaver_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.pdcch_interleaver_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pdcch_interleaver_sptr self)"""
        return _my_lte_swig.pdcch_interleaver_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pdcch_interleaver_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.pdcch_interleaver_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pdcch_interleaver_sptr self) -> int"""
        return _my_lte_swig.pdcch_interleaver_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pdcch_interleaver_sptr self) -> int"""
        return _my_lte_swig.pdcch_interleaver_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pdcch_interleaver_sptr self, int priority) -> int"""
        return _my_lte_swig.pdcch_interleaver_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pdcch_interleaver_sptr self) -> std::string"""
        return _my_lte_swig.pdcch_interleaver_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pdcch_interleaver_sptr self) -> std::string"""
        return _my_lte_swig.pdcch_interleaver_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pdcch_interleaver_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.pdcch_interleaver_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pdcch_interleaver_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.pdcch_interleaver_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pdcch_interleaver_sptr self) -> long"""
        return _my_lte_swig.pdcch_interleaver_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pdcch_interleaver_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.pdcch_interleaver_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pdcch_interleaver_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.pdcch_interleaver_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pdcch_interleaver_sptr self) -> std::string"""
        return _my_lte_swig.pdcch_interleaver_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pdcch_interleaver_sptr self, std::string name)"""
        return _my_lte_swig.pdcch_interleaver_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pdcch_interleaver_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.pdcch_interleaver_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pdcch_interleaver_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.pdcch_interleaver_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pdcch_interleaver_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.pdcch_interleaver_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pdcch_interleaver_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.pdcch_interleaver_sptr_message_subscribers(self, *args, **kwargs)

pdcch_interleaver_sptr_swigregister = _my_lte_swig.pdcch_interleaver_sptr_swigregister
pdcch_interleaver_sptr_swigregister(pdcch_interleaver_sptr)

pdcch_interleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pdcch_interleaver = pdcch_interleaver.make;

class scrambler_phich(object):
    """Proxy of C++ gr::my_lte::scrambler_phich class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make(*args, **kwargs):
        """make(uint32 N_id_cell, short rnti, uint32 set_align) -> scrambler_phich_sptr"""
        return _my_lte_swig.scrambler_phich_make(*args, **kwargs)

    make = staticmethod(make)
    __swig_destroy__ = _my_lte_swig.delete_scrambler_phich
    __del__ = lambda self : None;
scrambler_phich_swigregister = _my_lte_swig.scrambler_phich_swigregister
scrambler_phich_swigregister(scrambler_phich)

def scrambler_phich_make(*args, **kwargs):
  """scrambler_phich_make(uint32 N_id_cell, short rnti, uint32 set_align) -> scrambler_phich_sptr"""
  return _my_lte_swig.scrambler_phich_make(*args, **kwargs)

class scrambler_phich_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::my_lte::scrambler_phich)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::my_lte::scrambler_phich)> self) -> scrambler_phich_sptr
        __init__(boost::shared_ptr<(gr::my_lte::scrambler_phich)> self, scrambler_phich p) -> scrambler_phich_sptr
        """
        this = _my_lte_swig.new_scrambler_phich_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(scrambler_phich_sptr self) -> scrambler_phich"""
        return _my_lte_swig.scrambler_phich_sptr___deref__(self)

    __swig_destroy__ = _my_lte_swig.delete_scrambler_phich_sptr
    __del__ = lambda self : None;
    def make(self, *args, **kwargs):
        """make(scrambler_phich_sptr self, uint32 N_id_cell, short rnti, uint32 set_align) -> scrambler_phich_sptr"""
        return _my_lte_swig.scrambler_phich_sptr_make(self, *args, **kwargs)

    def history(self):
        """history(scrambler_phich_sptr self) -> unsigned int"""
        return _my_lte_swig.scrambler_phich_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(scrambler_phich_sptr self, int which, int delay)
        declare_sample_delay(scrambler_phich_sptr self, unsigned int delay)
        """
        return _my_lte_swig.scrambler_phich_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(scrambler_phich_sptr self, int which) -> unsigned int"""
        return _my_lte_swig.scrambler_phich_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(scrambler_phich_sptr self) -> int"""
        return _my_lte_swig.scrambler_phich_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(scrambler_phich_sptr self) -> double"""
        return _my_lte_swig.scrambler_phich_sptr_relative_rate(self)

    def start(self):
        """start(scrambler_phich_sptr self) -> bool"""
        return _my_lte_swig.scrambler_phich_sptr_start(self)

    def stop(self):
        """stop(scrambler_phich_sptr self) -> bool"""
        return _my_lte_swig.scrambler_phich_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(scrambler_phich_sptr self, unsigned int which_input) -> uint64_t"""
        return _my_lte_swig.scrambler_phich_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(scrambler_phich_sptr self, unsigned int which_output) -> uint64_t"""
        return _my_lte_swig.scrambler_phich_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(scrambler_phich_sptr self) -> int"""
        return _my_lte_swig.scrambler_phich_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(scrambler_phich_sptr self, int m)"""
        return _my_lte_swig.scrambler_phich_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(scrambler_phich_sptr self)"""
        return _my_lte_swig.scrambler_phich_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(scrambler_phich_sptr self) -> bool"""
        return _my_lte_swig.scrambler_phich_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(scrambler_phich_sptr self, int m)"""
        return _my_lte_swig.scrambler_phich_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(scrambler_phich_sptr self) -> int"""
        return _my_lte_swig.scrambler_phich_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(scrambler_phich_sptr self, int i) -> long"""
        return _my_lte_swig.scrambler_phich_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(scrambler_phich_sptr self, long max_output_buffer)
        set_max_output_buffer(scrambler_phich_sptr self, int port, long max_output_buffer)
        """
        return _my_lte_swig.scrambler_phich_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(scrambler_phich_sptr self, int i) -> long"""
        return _my_lte_swig.scrambler_phich_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(scrambler_phich_sptr self, long min_output_buffer)
        set_min_output_buffer(scrambler_phich_sptr self, int port, long min_output_buffer)
        """
        return _my_lte_swig.scrambler_phich_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(scrambler_phich_sptr self) -> float"""
        return _my_lte_swig.scrambler_phich_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(scrambler_phich_sptr self) -> float"""
        return _my_lte_swig.scrambler_phich_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(scrambler_phich_sptr self) -> float"""
        return _my_lte_swig.scrambler_phich_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(scrambler_phich_sptr self) -> float"""
        return _my_lte_swig.scrambler_phich_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(scrambler_phich_sptr self) -> float"""
        return _my_lte_swig.scrambler_phich_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(scrambler_phich_sptr self) -> float"""
        return _my_lte_swig.scrambler_phich_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(scrambler_phich_sptr self, int which) -> float
        pc_input_buffers_full(scrambler_phich_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.scrambler_phich_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(scrambler_phich_sptr self, int which) -> float
        pc_input_buffers_full_avg(scrambler_phich_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.scrambler_phich_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(scrambler_phich_sptr self, int which) -> float
        pc_input_buffers_full_var(scrambler_phich_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.scrambler_phich_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(scrambler_phich_sptr self, int which) -> float
        pc_output_buffers_full(scrambler_phich_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.scrambler_phich_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(scrambler_phich_sptr self, int which) -> float
        pc_output_buffers_full_avg(scrambler_phich_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.scrambler_phich_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(scrambler_phich_sptr self, int which) -> float
        pc_output_buffers_full_var(scrambler_phich_sptr self) -> pmt_vector_float
        """
        return _my_lte_swig.scrambler_phich_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(scrambler_phich_sptr self) -> float"""
        return _my_lte_swig.scrambler_phich_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(scrambler_phich_sptr self) -> float"""
        return _my_lte_swig.scrambler_phich_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(scrambler_phich_sptr self) -> float"""
        return _my_lte_swig.scrambler_phich_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(scrambler_phich_sptr self) -> float"""
        return _my_lte_swig.scrambler_phich_sptr_pc_work_time_total(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(scrambler_phich_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _my_lte_swig.scrambler_phich_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(scrambler_phich_sptr self)"""
        return _my_lte_swig.scrambler_phich_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(scrambler_phich_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _my_lte_swig.scrambler_phich_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(scrambler_phich_sptr self) -> int"""
        return _my_lte_swig.scrambler_phich_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(scrambler_phich_sptr self) -> int"""
        return _my_lte_swig.scrambler_phich_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(scrambler_phich_sptr self, int priority) -> int"""
        return _my_lte_swig.scrambler_phich_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(scrambler_phich_sptr self) -> std::string"""
        return _my_lte_swig.scrambler_phich_sptr_name(self)

    def symbol_name(self):
        """symbol_name(scrambler_phich_sptr self) -> std::string"""
        return _my_lte_swig.scrambler_phich_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(scrambler_phich_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.scrambler_phich_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(scrambler_phich_sptr self) -> io_signature_sptr"""
        return _my_lte_swig.scrambler_phich_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(scrambler_phich_sptr self) -> long"""
        return _my_lte_swig.scrambler_phich_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(scrambler_phich_sptr self) -> basic_block_sptr"""
        return _my_lte_swig.scrambler_phich_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(scrambler_phich_sptr self, int ninputs, int noutputs) -> bool"""
        return _my_lte_swig.scrambler_phich_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(scrambler_phich_sptr self) -> std::string"""
        return _my_lte_swig.scrambler_phich_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(scrambler_phich_sptr self, std::string name)"""
        return _my_lte_swig.scrambler_phich_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(scrambler_phich_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _my_lte_swig.scrambler_phich_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(scrambler_phich_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.scrambler_phich_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(scrambler_phich_sptr self) -> swig_int_ptr"""
        return _my_lte_swig.scrambler_phich_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(scrambler_phich_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _my_lte_swig.scrambler_phich_sptr_message_subscribers(self, *args, **kwargs)

scrambler_phich_sptr_swigregister = _my_lte_swig.scrambler_phich_sptr_swigregister
scrambler_phich_sptr_swigregister(scrambler_phich_sptr)

scrambler_phich_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
scrambler_phich = scrambler_phich.make;



